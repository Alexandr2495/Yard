# -*- coding: utf-8 -*-
"""
–û–ø—Ç–æ–≤—ã–π –±–æ—Ç-–∫–∞—Ç–∞–ª–æ–≥:
- –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ monitored_posts (—Ç–æ–ª—å–∫–æ –æ–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª).
- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞, –ø–∞–≥–∏–Ω–∞—Ü–∏—è, —Ü–µ–Ω–∞ —Å–ø—Ä–∞–≤–∞ " ¬∑ 12 345 ‚ÇΩ".
- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ -> "–í –∫–æ—Ä–∑–∏–Ω—É"/"–û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å" -> –≤—ã–±–æ—Ä qty -> –∑–∞—è–≤–∫–∏.
- –ö–æ—Ä–∑–∏–Ω–∞ —Å —Å—É–º–º–æ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏; –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ (–ø–æ —Ç–æ–≤–∞—Ä—É).
- /rescan: –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å monitored_posts (–æ–ø—Ç), –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ SINK_CHAT_ID.
- –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π —Ñ–ª–æ—É: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ ‚úÖ/‚ùå; –ø–æ—Å–ª–µ ‚úÖ ‚Äî –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–§–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è".
- OCR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): —Å–µ—Ä–∏–π–Ω–∏–∫ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —à–∞–±–ª–æ–Ω—ã (bot_settings): –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ç–µ–∫—Å—Ç—ã —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ + inline-UI –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""

import os
import re
import math
import time
import asyncio
import logging
from datetime import datetime, timezone, UTC
from typing import List, Tuple, Dict, Any, Optional

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    CallbackQuery,
    ContentType,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter, TelegramBadRequest

from sqlalchemy import select, func, text, and_, or_, update, not_

# –ë–î
from app_store.db.core import Session, MonitoredPost, BotSetting, Order, BotAdmin, Cart
from app_store.db.repo import Product
from app_store.db.repo import create_order

# –ü–∞—Ä—Å–∏–Ω–≥
from app_store.parsing.price_parser import parse_price_post

# –°–∏—Å—Ç–µ–º–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î
from app_store.privacy import consent_router, ConsentMiddleware, ConsentManager

# -----------------------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# -----------------------------------------------------------------------------
load_dotenv()
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("opt_bot")

TG_TOKEN_OPT = os.getenv("TG_TOKEN_OPT") or os.getenv("TG_TOKEN")
if not TG_TOKEN_OPT:
    raise SystemExit("Set TG_TOKEN_OPT in .env")

bot = Bot(TG_TOKEN_OPT, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä —Å–æ–≥–ª–∞—Å–∏—è
dp.include_router(consent_router)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
dp.message.middleware(ConsentMiddleware())
dp.callback_query.middleware(ConsentMiddleware())

CHANNEL_ID_OPT = int(os.getenv("CHANNEL_ID_OPT", "0") or "0")
CHANNEL_ID_STORE = int(os.getenv("CHANNEL_ID_STORE", "0") or "0")

# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ —Ç–µ—Ö-—á–∞—Ç
SINK_CHAT_ID = int(os.getenv("SINK_CHAT_ID", "0") or "0")  # –∫–æ–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –¥–ª—è /rescan
MANAGER_GROUP_ID = int(os.getenv("MANAGER_GROUP_ID", "0") or "0")
MANAGER_USER_IDS = {
    int(x) for x in (os.getenv("MANAGER_USER_IDS", "").replace(" ", "")).split(",") if x.isdigit()
}

# –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ iPhone
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: user_id -> dict(active_filters, filter_history)
# IPHONE_FILTERS = {}  # type: Dict[int, Dict[str, Any]]

# -----------------------------------------------------------------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (bot_settings) –∏ —à–∞–±–ª–æ–Ω—ã
# -----------------------------------------------------------------------------
DEFAULT_CONTACTS = (
    "üè¢ <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
    "üìç <b>–ê–¥—Ä–µ—Å:</b> —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123, –æ—Ñ. 45\n"
    "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (999) 123-45-67\n"
    "‚úâÔ∏è <b>Telegram:</b> @your_manager_username\n"
    "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ü–Ω-–ü—Ç: 9:00-18:00, –°–±: 10:00-16:00"
)

DEFAULT_TEMPLATES = {  # type: Dict[str, str]
    "order_received": (
        "üéâ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product_name}\n"
        "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        "üí∞ <b>–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:</b> {price_each} ‚ÇΩ\n"
        "üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total} ‚ÇΩ\n\n"
        "‚è≥ <i>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. "
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</i>\n\n"
        "{contacts}"
    ),
    "order_approved": (
        "‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>\n\n"
        "üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product_name}\n"
        "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        "üí∞ <b>–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:</b> {price_each} ‚ÇΩ\n"
        "üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total} ‚ÇΩ\n\n"
        "üìç –û–ø–ª–∞—Ç–∏—Ç—å –∏ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: <b>{address}</b>\n\n"
        "{contacts}"
    ),
    "order_rejected": (
        "üòî <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω</b>\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n"
        "üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product_name}\n"
        "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n\n"
        "üí° <i>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</i>\n"
        "‚Ä¢ –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
        "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
        "üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.</i>\n\n"
        "{contacts}"
    ),
    "cart_checkout_summary": (
        "üõí <b>–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
        "üéä <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í–∞—à –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏–Ω—è—Ç –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "üì¶ <b>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>\n"
        "{cart_items}\n\n"
        "üìä <b>–ò—Ç–æ–≥–∏:</b>\n"
        "‚Ä¢ –ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: <b>{items_count}</b>\n"
        "‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: <b>{total} ‚ÇΩ</b>\n\n"
        "‚è≥ <i>–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞!</i>\n\n"
        "{contacts}"
    ),
    "admin_order_notification": (
        "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
        "üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>{username_info}\n"
        "üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product_name}\n"
        "üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        "üí∞ <b>–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:</b> {price_each} ‚ÇΩ\n"
        "üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price} ‚ÇΩ\n\n"
        "‚ö° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:</b>"
    )
}

async def get_setting(key, default=""):
    async with Session() as s:
        setting = (await s.execute(select(BotSetting).where(BotSetting.key == key))).scalar_one_or_none()
        return setting.value if setting else default

async def set_setting(key, value, description=None, category=None):
    async with Session() as s:
        setting = (await s.execute(select(BotSetting).where(BotSetting.key == key))).scalar_one_or_none()
        if setting:
            setting.value = value
            setting.updated_at = datetime.now(UTC).replace(tzinfo=None)
            if description:
                setting.description = description
            if category:
                setting.category = category
        else:
            s.add(BotSetting(key=key, value=value, description=description, category=category))
        await s.commit()

async def get_setting_with_meta(key, default=""):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    async with Session() as s:
        setting = (await s.execute(select(BotSetting).where(BotSetting.key == key))).scalar_one_or_none()
        if setting:
            return setting.value, setting.description, setting.category
        return default, None, None

async def get_contacts_text():
    return await get_setting("contacts", DEFAULT_CONTACTS)

async def get_template(name):
    default = DEFAULT_TEMPLATES.get(name, "")
    return await get_setting(f"tpl:wholesale:{name}", default)

def render_template(tpl, **kwargs):
    try:
        return tpl.format(**kwargs)
    except Exception:
        return tpl

def extract_address_and_contacts(contacts_text):
    """–í—ã–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –∏–∑ –±–ª–æ–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –≤–µ—Ä–Ω—É—Ç—å (address, contacts_without_address)."""
    lines = [(line or "").strip() for line in (contacts_text or "").splitlines()]
    address_value: str = ""
    filtered = []  # type: list[str]
    for line in lines:
        low = line.lower()
        if not address_value and ("–∞–¥—Ä–µ—Å:" in low or "address:" in low):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
            parts = line.split(":", 1)
            address_value = (parts[1] if len(parts) > 1 else "").strip()
            continue
        filtered.append(line)
    # –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±–µ–∑ –∞–¥—Ä–µ—Å–∞ (—É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
    filtered_text = "\n".join([l for l in filtered if l])
    return (address_value or "", filtered_text)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø–æ—Å—Ç–æ–≤ (–Ω–∞–ø—Ä—è–º—É—é —Å –ë–î)
async def get_monitored_message_ids(channel_type):
    """–ü–æ–ª—É—á–∏—Ç—å ID –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î"""
    channel_id = CHANNEL_ID_OPT if channel_type == "opt" else CHANNEL_ID_STORE
    if not channel_id:
        return set()
    
    async with Session() as s:
        posts = (await s.execute(
            select(MonitoredPost)
            .where(MonitoredPost.channel_id == channel_id)
            .where(MonitoredPost.is_active == True)
        )).scalars().all()
        
        return {post.message_id for post in posts}

async def set_monitored_message_ids(channel_type, message_ids):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î - —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ MonitoredPost"""
    channel_id = CHANNEL_ID_OPT if channel_type == "opt" else CHANNEL_ID_STORE
    if not channel_id:
        return
    
    async with Session() as s:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        existing_posts = (await s.execute(
            select(MonitoredPost)
            .where(MonitoredPost.channel_id == channel_id)
        )).scalars().all()
        
        existing_ids = {post.message_id for post in existing_posts}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏ —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        for message_id in message_ids:
            if message_id not in existing_ids:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                post = MonitoredPost(
                    channel_id=channel_id,
                    message_id=message_id,
                    category="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    is_active=True
                )
                s.add(post)
            else:
                # –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç –µ—Å–ª–∏ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
                existing_post = next(p for p in existing_posts if p.message_id == message_id)
                if not existing_post.is_active:
                    existing_post.is_active = True
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –ø—Ä–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    existing_post.category = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        for post in existing_posts:
            if post.message_id not in message_ids:
                post.is_active = False
        
        await s.commit()

async def get_master_message_id(channel_type):
    """–ü–æ–ª—É—á–∏—Ç—å ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î"""
    key = f"master_message_id_{channel_type}"
    value = await get_setting(key, "0")
    return int(value) if value.isdigit() else 0

async def set_master_message_id(channel_type: str, message_id: int) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î"""
    key = f"master_message_id_{channel_type}"
    description = f"ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {channel_type} –∫–∞–Ω–∞–ª–∞"
    await set_setting(key, str(message_id), description, "monitoring")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∞–º–∏
async def get_all_admins() -> List[BotAdmin]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤"""
    async with Session() as s:
        admins = (await s.execute(
            select(BotAdmin)
            .where(BotAdmin.is_active == True)
            .order_by(BotAdmin.added_at)
        )).scalars().all()
        return list(admins)

async def add_admin_by_username(username: str, full_name: str = None, added_by: int = None, channel_type: str = 'wholesale') -> tuple[bool, str]:
    """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ username. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, message)"""
    # –û—á–∏—â–∞–µ–º username –æ—Ç @
    clean_username = username.lstrip('@').lower()
    
    async with Session() as s:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–æ–º –ø–æ username
        existing = (await s.execute(
            select(BotAdmin)
            .where(BotAdmin.username == clean_username)
            .where(BotAdmin.channel_type == channel_type)
        )).scalar_one_or_none()
        
        if existing:
            if existing.is_active:
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
            else:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                existing.is_active = True
                existing.added_by = added_by or 0
                existing.added_at = datetime.now(UTC).replace(tzinfo=None)
                await s.commit()
                return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º user_id
            temp_user_id = -(hash(clean_username) % 1000000)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID
            admin = BotAdmin(
                user_id=temp_user_id,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                username=clean_username,
                full_name=full_name,
                added_by=added_by or 0,
                added_at=datetime.now(UTC).replace(tzinfo=None),
                is_active=True,
                channel_type=channel_type
            )
            s.add(admin)
            await s.commit()
            return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω"

async def update_admin_user_id(username: str, user_id: int, full_name: str = None, channel_type: str = 'wholesale') -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å user_id –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏. –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å —Å –¥—Ä—É–≥–∏–º user_id, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë."""
    clean_username = username.lstrip('@').lower()
    
    async with Session() as s:
        admin = (await s.execute(
            select(BotAdmin)
            .where(BotAdmin.username == clean_username)
            .where(BotAdmin.channel_type == channel_type)
        )).scalar_one_or_none()
        
        if admin:
            admin.user_id = user_id
            if full_name:
                admin.full_name = full_name
            await s.commit()
            return True
        return False

async def remove_admin_by_username(username: str) -> tuple[bool, str]:
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ username. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success, message)"""
    clean_username = username.lstrip('@').lower()
    
    async with Session() as s:
        admin = (await s.execute(
            select(BotAdmin).where(BotAdmin.username == clean_username)
        )).scalar_one_or_none()
        
        if not admin:
            return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤"
        
        if not admin.is_active:
            return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"
        
        admin.is_active = False
        await s.commit()
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤"

async def remove_admin(user_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ user_id (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    async with Session() as s:
        admin = (await s.execute(
            select(BotAdmin).where(BotAdmin.user_id == user_id)
        )).scalar_one_or_none()
        
        if not admin:
            return False
        
        admin.is_active = False
        await s.commit()
        return True

async def is_admin(user_id: int, username: str = None, channel_type: str = 'wholesale') -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –û–±–Ω–æ–≤–ª—è–µ—Ç user_id –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏."""
    async with Session() as s:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user_id
        admin = (await s.execute(
            select(BotAdmin)
            .where(BotAdmin.user_id == user_id)
            .where(BotAdmin.is_active == True)
            .where(BotAdmin.channel_type == channel_type)
        )).scalar_one_or_none()
        
        if admin:
            return True
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ user_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if username:
            clean_username = username.lstrip('@').lower()
            admin = (await s.execute(
                select(BotAdmin)
                .where(BotAdmin.username == clean_username)
                .where(BotAdmin.is_active == True)
                .where(BotAdmin.channel_type == channel_type)
            )).scalar_one_or_none()
            
            if admin:
                # –µ—Å–ª–∏ user_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ‚Äî –æ–±–Ω–æ–≤–∏–º
                if admin.user_id != user_id:
                    admin.user_id = user_id
                    await s.commit()
                return True
        
        return False

# -----------------------------------------------------------------------------
# –ö–æ—Ä–∑–∏–Ω–∞ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
# -----------------------------------------------------------------------------
async def get_cart_items(uid: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with Session() as s:
        cart = (await s.execute(select(Cart).where(Cart.user_id == uid))).scalar_one_or_none()
        if cart:
            return cart.items
        return []

async def update_cart_items(uid: int, items: List[Dict[str, Any]]):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with Session() as s:
        cart = (await s.execute(select(Cart).where(Cart.user_id == uid))).scalar_one_or_none()
        if cart:
            cart.items = items
        else:
            cart = Cart(user_id=uid, items=items)
            s.add(cart)
        await s.commit()

async def clear_cart_db(uid: int):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with Session() as s:
        cart = (await s.execute(select(Cart).where(Cart.user_id == uid))).scalar_one_or_none()
        if cart:
            await s.delete(cart)
            await s.commit()

async def cart_total_db(uid: int) -> int:
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã"""
    items = await get_cart_items(uid)
    return sum(int(i["qty"]) * int(i["price_each"]) for i in items)

async def cart_count_db(uid: int) -> int:
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    items = await get_cart_items(uid)
    return sum(int(i["qty"]) for i in items)

# -----------------------------------------------------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------------------------------------------------------
def adaptive_kb(
    buttons,  # type: List[tuple[str, str]]
    *,
    max_per_row: int = 2,
    max_row_chars: int = 40
) -> InlineKeyboardMarkup:
    """
    –ü–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω: 2 –≤ —Ä—è–¥, ~40 —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–µ–∫—Å—Ç), —á—Ç–æ–±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–ª–µ–∑–∞–ª–æ —Ü–µ–ª–∏–∫–æ–º.
    """
    rows = []  # type: list[list[InlineKeyboardButton]]
    cur = []  # type: list[InlineKeyboardButton]
    cur_len = 0
    for text_label, data in buttons:
        tlen = len(text_label or "")
        if cur and (len(cur) >= max_per_row or cur_len + tlen > max_row_chars):
            rows.append(cur)
            cur, cur_len = [], 0
        cur.append(InlineKeyboardButton(text=text_label, callback_data=data))
        cur_len += tlen
    if cur:
        rows.append(cur)
    return InlineKeyboardMarkup(inline_keyboard=rows)

def merge_kb(top: InlineKeyboardMarkup, bottom_rows):  # type: (InlineKeyboardMarkup, list[list[InlineKeyboardButton]]) -> InlineKeyboardMarkup
    rows = list(top.inline_keyboard or [])
    rows.extend(bottom_rows)
    return InlineKeyboardMarkup(inline_keyboard=rows)

def paginate_bar(page: int, pages: int, prev_cb: str, info_cb: str, next_cb: str) -> list[list[InlineKeyboardButton]]:
    left  = ('‚¨ÖÔ∏è', prev_cb) if page > 1 else ('¬∑', info_cb)
    mid   = (f'–°—Ç—Ä. {page}/{pages}', info_cb)
    right = ('‚û°Ô∏è', next_cb) if page < pages else ('¬∑', info_cb)
    row = [InlineKeyboardButton(text=left[0],  callback_data=left[1]),
           InlineKeyboardButton(text=mid[0],   callback_data=mid[1]),
           InlineKeyboardButton(text=right[0], callback_data=right[1])]
    return [row]

# -----------------------------------------------------------------------------
# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------------------------------------------------------
def fmt_price(p: int) -> str:
    return f"{p:,}".replace(",", " ")

# def get_iphone_filter_state(user_id: int) -> Dict[str, Any]:
#     """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     if user_id not in IPHONE_FILTERS:
#         IPHONE_FILTERS[user_id] = {
#             "active_filters": {},
#             "filter_history": [],
#             "current_step": "main"
#         }
#     return IPHONE_FILTERS[user_id]

# def set_iphone_filter(user_id: int, filter_type: str, filter_value: str) -> None:
#     """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"""
#     state = get_iphone_filter_state(user_id)
#     state["active_filters"][filter_type] = filter_value
#     state["filter_history"].append({"type": filter_type, "value": filter_value})

# def clear_iphone_filter(user_id: int, filter_type: str = None) -> None:
#     """–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
#     state = get_iphone_filter_state(user_id)
#     if filter_type:
#         state["active_filters"].pop(filter_type, None)
#         # –£–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
#         state["filter_history"] = [f for f in state["filter_history"] if f["type"] != filter_type]
#     else:
#         state["active_filters"] = {}
#         state["filter_history"] = []
#         state["current_step"] = "main"

# def get_iphone_filter_summary(user_id: int) -> str:
#     """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
#     state = get_iphone_filter_state(user_id)
#     if not state["active_filters"]:
#         return "–§–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    
#     parts = []
#     for filter_type, value in state["active_filters"].items():
#         if filter_type == "model":
#             parts.append(f"–ú–æ–¥–µ–ª—å: {value}")
#         elif filter_type == "memory":
#             parts.append(f"–ü–∞–º—è—Ç—å: {value}")
#         elif filter_type == "condition":
#             parts.append(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {value}")
#         elif filter_type == "country":
#             parts.append(f"–°—Ç—Ä–∞–Ω–∞: {value}")
#         elif filter_type == "color":
#             parts.append(f"–¶–≤–µ—Ç: {value}")
    
#     return " | ".join(parts)

# def get_iphone_model_groups() -> Dict[str, List[str]]:
#     """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –º–æ–¥–µ–ª–µ–π iPhone –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
#     return {
#         "16 Pro/Pro Max": ["16 Pro", "16 Pro Max"],
#         "16/16 Plus": ["16", "16 Plus"],
#         "15 Pro/Pro Max": ["15 Pro", "15 Pro Max"],
#         "15/15 Plus": ["15", "15 Plus"],
#         "14/14 Plus": ["14", "14 Plus"],
#         "13": ["13"],
#         "12": ["12"],
#         "11": ["11"],
#         "SE": ["SE"],
#         "16e": ["16e"],
#         "17 Pro": ["17 Pro"]
#     }

# def get_iphone_memory_groups() -> Dict[str, List[str]]:
#     """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–º–æ–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
#     return {
#         "64GB": ["64"],
#         "128GB": ["128"],
#         "256GB": ["256"],
#         "512GB": ["512"],
#         "1TB": ["1tb"]
#     }

# def get_iphone_color_groups() -> Dict[str, List[str]]:
#     """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
#     return {
#         "–ß–µ—Ä–Ω—ã–π": ["black"],
#         "–ë–µ–ª—ã–π": ["white"],
#         "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π": ["natural"],
#         "–ü—É—Å—Ç—ã–Ω–Ω—ã–π": ["desert"],
#         "–°–∏–Ω–∏–π": ["blue", "ultramarine"],
#         "–†–æ–∑–æ–≤—ã–π": ["pink"],
#         "–ó–µ–ª–µ–Ω—ã–π": ["green"],
#         "–ñ–µ–ª—Ç—ã–π": ["yellow"],
#         "–ë–∏—Ä—é–∑–æ–≤—ã–π": ["teal"],
#         "–û—Ä–∞–Ω–∂–µ–≤—ã–π": ["orange"],
#         "–ö—Ä–∞—Å–Ω—ã–π": ["red"],
#         "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π": ["purple"]
#     }

# def get_iphone_country_groups() -> Dict[str, List[str]]:
#     """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–∞–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
#     return {
#         "üá¶üá™ –û–ê–≠": ["üá¶üá™"],
#         "üáÆüá≥ –ò–Ω–¥–∏—è": ["üáÆüá≥"],
#         "üá≠üá∞ –ì–æ–Ω–∫–æ–Ω–≥": ["üá≠üá∞"],
#         "üá∫üá∏ –°–®–ê": ["üá∫üá∏"],
#         "üáØüáµ –Ø–ø–æ–Ω–∏—è": ["üáØüáµ"],
#         "üá™üá∫ –ï–≤—Ä–æ–ø–∞": ["üá™üá∫"]
#     }

# async def get_filter_counts(user_id: int = None, current_filters: Dict[str, str] = None) -> Dict[str, Dict[str, int]]:
#     """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Å —É—á–µ—Ç–æ–º —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
#     if not CHANNEL_ID_OPT:
#         return {}
    
#     try:
#         async with Session() as s:
#             # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç iPhone
#             iphone_post = (await s.execute(
#                 select(MonitoredPost)
#                 .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
#                 .where(MonitoredPost.is_active == True)
#                 .where(MonitoredPost.category.ilike('%üçè iPhone%'))
#             )).scalar_one_or_none()
            
#             if not iphone_post:
#                 return {}
            
#             # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã iPhone —Å —É—á–µ—Ç–æ–º —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
#             query = select(Product).where(
#                 and_(
#                     Product.channel_id == CHANNEL_ID_OPT,
#                     Product.group_message_id == iphone_post.message_id,
#                     Product.available == True,
#                     Product.price_wholesale != None
#                 )
#             )
            
#             # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
#             if current_filters:
#                 # –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
#                 if "condition" in current_filters:
#                     condition = current_filters["condition"]
#                     if condition == "–ù–æ–≤—ã–µ":
#                         query = query.where(Product.is_used == False)
#                     elif condition == "–ë/–£":
#                         query = query.where(Product.is_used == True)
                
#                 # –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞)
#                 # –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞–º—è—Ç–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞)
#                 # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞)
#                 # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç—É (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞)
            
#             # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
#             filtered_products = list((await s.execute(query)).scalars())
            
#             counts = {
#                 "models": {},
#                 "memories": {},
#                 "countries": {},
#                 "colors": {}
#             }
            
#             # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é)
#             model_groups = get_iphone_model_groups()
#             for group_name, models in model_groups.items():
#                 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
#                 if current_filters and "model" in current_filters and current_filters["model"] == group_name:
#                     continue
                    
#                 count = 0
#                 for product in filtered_products:
#                     for model in models:
#                         if model in product.name:
#                             count += 1
#                             break
#                 counts["models"][group_name] = count
            
#             # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–º—è—Ç—å (–∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é)
#             memory_groups = get_iphone_memory_groups()
#             for group_name, memories in memory_groups.items():
#                 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–º—è—Ç—å
#                 if current_filters and "memory" in current_filters and current_filters["memory"] == group_name:
#                     continue
                    
#                 count = 0
#                 for product in filtered_products:
#                     for memory in memories:
#                         if memory in product.name:
#                             count += 1
#                             break
#                 counts["memories"][group_name] = count
            
#             # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—ã (–∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é)
#             country_groups = get_iphone_country_groups()
#             for group_name, flags in country_groups.items():
#                 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É
#                 if current_filters and "country" in current_filters and current_filters["country"] == group_name:
#                     continue
                    
#                 count = 0
#                 for product in filtered_products:
#                     if product.extra_attrs and 'flag' in product.extra_attrs:
#                         if product.extra_attrs['flag'] in flags:
#                             count += 1
#                 counts["countries"][group_name] = count
            
#             # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–≤–µ—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
#             color_groups = get_iphone_color_groups()
#             for group_name, colors in color_groups.items():
#                 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
#                 if current_filters and "color" in current_filters and current_filters["color"] == group_name:
#                     continue
                    
#                 count = 0
#                 for product in filtered_products:
#                     for color in colors:
#                         if color in product.name.lower():
#                             count += 1
#                             break
#                 counts["colors"][group_name] = count
            
#             return counts
            
#     except Exception as e:
#         log.error(f"Error getting filter counts: {e}")
#         return {}

def get_adaptive_button_length(user_id: int = None, user_agent: str = None) -> int:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏.
    """
    # –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    mobile_limit = 40   # –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É) - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞
    desktop_limit = 60  # –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤ (–±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
    tablet_limit = 50   # –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤ (—Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º User-Agent –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if user_agent:
        user_agent_lower = user_agent.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ User-Agent
        if any(keyword in user_agent_lower for keyword in ['mobile', 'android', 'iphone', 'ipad']):
            if 'ipad' in user_agent_lower or 'tablet' in user_agent_lower:
                return tablet_limit
            return mobile_limit
        elif any(keyword in user_agent_lower for keyword in ['desktop', 'windows', 'mac', 'linux']):
            return desktop_limit
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    return mobile_limit

# -----------------------------------------------------------------------------
# –ö–∞—Ç–∞–ª–æ–≥: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
# -----------------------------------------------------------------------------
async def fetch_categories() -> list[tuple[str, str]]:
    """
    –ß–∏—Ç–∞–µ—Ç monitored_posts –¥–ª—è –æ–ø—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [(caption, cbdata)].
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º - –µ—Å–ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤, 
    –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤–æ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞—Ö.
    """
    if not CHANNEL_ID_OPT:
        return []
    async with Session() as s:
        posts = (await s.execute(
            select(MonitoredPost)
            .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
            .where(MonitoredPost.is_active == True)
            .order_by(MonitoredPost.message_id)
        )).scalars().all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç–∏–ø—É –ë/–£
    categories = {}
    for post in posts:
        label = post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ö–æ–Ω—Ç–∞–∫—Ç—ã" –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
        if "–∫–æ–Ω—Ç–∞–∫—Ç" in label.lower() or "contact" in label.lower():
            continue
        
        key = (label, post.is_used)
        if key not in categories:
            categories[key] = []
        categories[key].append(post.message_id)
    
    buttons = []
    for (label, is_used), message_ids in categories.items():
        if is_used:
            label += " (–ë/–£)"
        
        if len(message_ids) == 1:
            # –û–¥–∏–Ω –ø–æ—Å—Ç - –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            buttons.append((label, f"c|{message_ids[0]}|{1 if is_used else 0}|1"))
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, 
            # –Ω–æ –≤ fetch_products_page –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤–æ –≤—Å–µ—Ö
            buttons.append((label, f"c|{message_ids[0]}|{1 if is_used else 0}|1|multi|{','.join(map(str, message_ids))}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è iPhone —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    # buttons.append(("üì± iPhone (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)", "iphone_filters"))
    
    return buttons

async def get_category_name(message_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ message_id"""
    async with Session() as s:
        post = (await s.execute(
            select(MonitoredPost)
            .where(MonitoredPost.message_id == message_id)
            .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
        )).scalar_one_or_none()
        
        if post:
            return post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

async def fetch_products_page(group_message_id: int, is_used: bool, page: int, per_page: int = 24, multi_message_ids = None):  # type: (int, bool, int, int, List[int]) -> tuple[List[Product], int, int, int]
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (items, total, pages, page). 
    –ï—Å–ª–∏ multi_message_ids –∑–∞–¥–∞–Ω, –∏—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤–æ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö.
    –ò–Ω–∞—á–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ—Å—Ç—É (group_message_id) –∏ —Ñ–ª–∞–≥—É –ë/–£.
    """
    if not CHANNEL_ID_OPT:
        return [], 0, 1, 1
    async with Session() as s:
        if multi_message_ids:
            # –ü–æ–∏—Å–∫ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–∞—Ö
            where_clause = and_(
                Product.channel_id == CHANNEL_ID_OPT,
                Product.group_message_id.in_(multi_message_ids),
                Product.is_used == is_used,
                Product.available == True,
                Product.price_wholesale != None,
            )
        else:
            # –ü–æ–∏—Å–∫ –≤ –æ–¥–Ω–æ–º –ø–æ—Å—Ç–µ
            where_clause = and_(
                Product.channel_id == CHANNEL_ID_OPT,
                Product.group_message_id == group_message_id,
                Product.is_used == is_used,
                Product.available == True,
                Product.price_wholesale != None,
            )
        
        total = (await s.execute(select(func.count()).select_from(Product).where(where_clause))).scalar_one()
        pages = max(1, math.ceil(total / per_page))
        page = min(max(1, page), pages)
        offset = (page - 1) * per_page
        q = select(Product).where(where_clause).order_by(Product.order_index.nulls_last(), Product.name).limit(per_page).offset(offset)
        items = list((await s.execute(q)).scalars())
    return items, total, pages, page

# @dp.callback_query(F.data == "iphone_filters")
# async def cb_iphone_filters(c: CallbackQuery):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ iPhone —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
#     try:
#         user_id = c.from_user.id if c.from_user else 0
#         text = "üì± <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è iPhone</b>\n\n"
#         text += f"<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {get_iphone_filter_summary(user_id)}\n\n"
#         text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
#         
#         await c.message.edit_text(text, parse_mode="HTML")
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
#         await c.message.answer(
#             text,
#             parse_mode="HTML",
#             reply_markup=filter_menu_kb(user_id)
#         )
#     except Exception as e:
#         log.error(f"Error in iphone_filters: {e}")
#         await c.answer("–û—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("c|"))
async def cb_category(c: CallbackQuery):
    try:
        parts = c.data.split("|")
        mid_str, used_flag, page_str = parts[1], parts[2], parts[3]
        mid = int(mid_str); is_used = (used_flag == "1"); page = int(page_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö
        multi_message_ids = None
        if len(parts) > 5 and parts[4] == "multi":
            multi_message_ids = [int(x) for x in parts[5].split(",")]
    except Exception:
        await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    items, total, pages, page = await fetch_products_page(mid, is_used, page, multi_message_ids=multi_message_ids)
    if not items:
        cats = await fetch_categories()
        max_row_chars = 34 if any(len(t) > 16 for t, _ in cats) else 40
        kb = adaptive_kb(cats, max_per_row=2, max_row_chars=max_row_chars)
        await safe_edit_message(c.message, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=kb)
        await c.answer()
        return

    # –¢–æ–≤–∞—Ä—ã –≤ –≤–∏–¥–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏
    buttons = []
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    MAX_LENGTH = get_adaptive_button_length(c.from_user.id if c.from_user else None)
    log.info(f"User {c.from_user.id if c.from_user else 'unknown'} - MAX_LENGTH: {MAX_LENGTH}")
    
    for p in items:
        price = int(p.price_wholesale or 0)
        flag = ""
        try:
            ea = dict(p.extra_attrs or {})
            flag = (ea.get("flag") or "").strip()
        except Exception:
            flag = ""
        
        name = (p.name or "").strip()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Ñ–ª–∞–≥–∞ –≤ –Ω–∞—á–∞–ª–µ
        full_name = name
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å —Ñ–ª–∞–≥–æ–º –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏
        if price > 0:
            flag_separator = f" {flag} " if flag else " ¬∑ "
            suffix = f"{flag_separator}{fmt_price(price)} ‚ÇΩ"
        else:
            suffix = ""
        full_text_with_suffix = f"{full_name}{suffix}"
        
        # –ï—Å–ª–∏ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–º–Ω–æ
        if len(full_text_with_suffix) > MAX_LENGTH:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å
            suffix_len = len(suffix)
            # –î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è (—Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è "...")
            available_name_length = MAX_LENGTH - suffix_len - 3 # -3 –¥–ª—è "..."
            
            if available_name_length < 3: # –ï—Å–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ—á—Ç–∏ –≤—Å–µ –º–µ—Å—Ç–æ
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É
                if suffix_len <= MAX_LENGTH - 3:
                    title = "..." + suffix
                else:
                    # –ï—Å–ª–∏ –¥–∞–∂–µ —Ü–µ–Ω–∞ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –æ–±—Ä–µ–∑–∞–µ–º –µ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    title = suffix[:MAX_LENGTH-3] + "..."
            else:
                # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—á–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –±–µ—Ä–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
                if len(full_name) <= available_name_length:
                    short_name = full_name
                else:
                    # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª–∏–Ω—ã
                    short_name = full_name[:available_name_length] + "..."
                
                title = f"{short_name}{suffix}"
        else:
            title = full_text_with_suffix
            
        buttons.append((title, f"p|{p.id}|{mid}|{1 if is_used else 0}|{page}"))

    grid = adaptive_kb(buttons, max_per_row=2, max_row_chars=MAX_LENGTH)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º callback data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    base_cb = f"c|{mid}|{1 if is_used else 0}"
    if multi_message_ids:
        multi_part = f"|multi|{','.join(map(str, multi_message_ids))}"
    else:
        multi_part = ""
    
    bar = paginate_bar(
        page, pages,
        prev_cb=f"{base_cb}|{page-1}{multi_part}",
        info_cb=f"{base_cb}|{page}{multi_part}",
        next_cb=f"{base_cb}|{page+1}{multi_part}",
    )
    back_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back")]
    kb = merge_kb(grid, [bar[0], back_row])

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = await get_category_name(mid)
    if is_used:
        category_name = f"üîß {category_name}"
    
    caption = f"üì± <b>{category_name}</b>\n\n–¢–æ–≤–∞—Ä–æ–≤: {total}"
    try:
        await c.message.edit_text(caption, reply_markup=kb, parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await c.answer()
            return
        try:
            await c.message.edit_reply_markup(reply_markup=kb)
        except TelegramBadRequest as e2:
            if "message is not modified" in str(e2):
                await c.answer()
                return
            raise
    await c.answer()

@dp.callback_query(F.data == "back")
async def cb_back(c: CallbackQuery):
    uid = c.from_user.id
    log.info(f"Back button pressed by user {uid}")
    
    cats = await fetch_categories()
    max_row_chars = 34 if any(len(t) > 16 for t, _ in cats) else 40
    kb = adaptive_kb(cats, max_per_row=2, max_row_chars=max_row_chars) if cats else adaptive_kb([("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", "noop")])
    try:
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

# @dp.callback_query(F.data == "back_to_filters")
# async def cb_back_to_filters(c: CallbackQuery):
#     """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º iPhone"""
#     try:
#         await c.message.edit_text(
#             "üì± <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è iPhone</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤:",
#             parse_mode="HTML"
#         )
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
#         await c.message.answer(
#             "üì± <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è iPhone</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤:",
#             parse_mode="HTML",
#             reply_markup=filter_menu_kb()
#         )
#     except Exception as e:
#         log.error(f"Error in back_to_filters: {e}")
#         await c.answer("–û—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ iPhone
# @dp.callback_query(F.data == "iphone_prev")
# async def cb_iphone_prev(c: CallbackQuery):
#     """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ iPhone"""
#     # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
#     await c.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# @dp.callback_query(F.data == "iphone_next")
# async def cb_iphone_next(c: CallbackQuery):
#     """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ iPhone"""
#     # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
#     await c.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# @dp.callback_query(F.data == "iphone_info")
# async def cb_iphone_info(c: CallbackQuery):
#     """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ iPhone"""
#     # TODO: –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
#     await c.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î
@dp.callback_query(F.data == "consent_agree")
async def cb_consent_agree(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î"""
    user_id = c.from_user.id
    username = c.from_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    await ConsentManager.save_user_consent(
        user_id=user_id,
        username=username,
        ip_address=str(c.message.chat.id),
        user_agent="Telegram Bot"
    )
    
    await c.message.edit_text(
        "‚úÖ <b>–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –æ–ø—Ç–æ–≤—ã–º –º–∞–≥–∞–∑–∏–Ω–æ–º.\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö?",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="marketing_agree"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="marketing_decline")
            ]
        ])
    )
    await c.answer()


@dp.callback_query(F.data == "consent_decline")
async def cb_consent_decline(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è"""
    await c.message.edit_text(
        "‚ùå <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
        "–º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —É—Å–ª—É–≥–∏.\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="HTML"
    )
    await c.answer()


@dp.callback_query(F.data == "marketing_agree")
async def cb_marketing_agree(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = c.from_user.id
    await ConsentManager.set_marketing_consent(user_id, True)
    
    await c.message.edit_text(
        "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–ø—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω! üõç",
        parse_mode="HTML"
    )
    await c.answer()


@dp.callback_query(F.data == "marketing_decline")
async def cb_marketing_decline(c: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user_id = c.from_user.id
    await ConsentManager.set_marketing_consent(user_id, False)
    
    await c.message.edit_text(
        "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–ø—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω! üõç",
        parse_mode="HTML"
    )
    await c.answer()

@dp.callback_query(F.data.startswith("p|"))
async def cb_product(c: CallbackQuery):
    try:
        parts = c.data.split("|")
        _, pid_str, mid_str, used_flag, page_str = parts[:5]
        pid = int(pid_str); mid = int(mid_str); is_used = (used_flag == "1"); page = int(page_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö
        multi_message_ids = None
        if len(parts) > 6 and parts[5] == "multi":
            multi_message_ids = [int(x) for x in parts[6].split(",")]
    except Exception:
        await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    async with Session() as s:
        prod = (await s.execute(select(Product).where(Product.id == pid))).scalar_one_or_none()
    if not prod:
        await c.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    price = int(prod.price_wholesale or 0)
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    try:
        ea = dict(prod.extra_attrs or {})
        flag = (ea.get("flag") or "").strip()
    except Exception:
        flag = ""
    lines = [f"<b>{prod.name}{flag}</b>"]
    if price > 0:
        lines.append(f"–¶–µ–Ω–∞ –û–ü–¢: <b>{fmt_price(price)} ‚ÇΩ</b>")
    else:
        lines.append("–¶–µ–Ω–∞ –û–ü–¢: <b>–ù–µ —É–∫–∞–∑–∞–Ω–∞</b>")
    if prod.category:
        lines.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {prod.category}")
    if prod.is_used:
        lines.append("–°–æ—Å—Ç–æ—è–Ω–∏–µ: –ë/–£")
    text_msg = "\n".join(lines)

    # –§–æ—Ä–º–∏—Ä—É–µ–º callback data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    base_cb = f"c|{mid}|{1 if is_used else 0}|{page}"
    if multi_message_ids:
        base_cb += f"|multi|{','.join(map(str, multi_message_ids))}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"cart:start:{prod.id}")],
        [InlineKeyboardButton(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"order:start:{prod.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=base_cb)],
    ])
    try:
        await c.message.edit_text(text_msg, reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

def _qty_kb(prefix: str, pid: int, qty: int, price_each: int) -> InlineKeyboardMarkup:
    if qty < 1:
        qty = 1
    total = qty * max(0, int(price_each or 0))
    buttons = [
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"{prefix}:qty:{pid}:{qty-1}"),
            InlineKeyboardButton(text=f"{qty}", callback_data="noop"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"{prefix}:qty:{pid}:{qty+1}"),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (–ò—Ç–æ–≥–æ: {fmt_price(total)} ‚ÇΩ)", callback_data=f"{prefix}:make:{pid}:{qty}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –∫–æ—Ä–∑–∏–Ω—ã) ===
@dp.callback_query(F.data.regexp(r"^(order:start):(\d+)$"))
async def cb_order_start(call: CallbackQuery):
    try:
        pid = int(call.data.split(":")[2])
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    async with Session() as s:
        prod = (await s.execute(select(Product).where(Product.id == pid))).scalar_one_or_none()
        if not prod:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        price_each = int(prod.price_wholesale or prod.price_retail or 0)
        if price_each <= 0:
            await call.answer("–ù–µ—Ç —Ü–µ–Ω—ã", show_alert=True)
            return

        # —Ñ–ª–∞–≥ —Ç–æ–≤–∞—Ä–∞
        try:
            ea = dict(prod.extra_attrs or {})
            flag = (ea.get("flag") or "").strip()
        except Exception:
            flag = ""
        text = (
            f"<b>{prod.name}{flag}</b>\n"
            f"–¶–µ–Ω–∞: <b>{fmt_price(price_each)} ‚ÇΩ</b>\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑."
        )
        await call.message.edit_text(text, reply_markup=_qty_kb("order", prod.id, 1, price_each), parse_mode="HTML")

@dp.callback_query(F.data.regexp(r"^order:qty:(\d+):(\d+)$"))
async def cb_order_qty(call: CallbackQuery):
    _, _, pid_str, qty_str = call.data.split(":")
    try:
        pid = int(pid_str)
        qty = max(1, int(qty_str))
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", show_alert=True)
        return

    async with Session() as s:
        prod = (await s.execute(select(Product).where(Product.id == pid))).scalar_one_or_none()
        if not prod:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        price_each = int(prod.price_wholesale or prod.price_retail or 0)
        if price_each <= 0:
            await call.answer("–ù–µ—Ç —Ü–µ–Ω—ã", show_alert=True)
            return

        # —Ñ–ª–∞–≥ —Ç–æ–≤–∞—Ä–∞
        try:
            ea = dict(prod.extra_attrs or {})
            flag = (ea.get("flag") or "").strip()
        except Exception:
            flag = ""
        text = (
            f"<b>{prod.name}{flag}</b>\n"
            f"–¶–µ–Ω–∞: <b>{fmt_price(price_each)} ‚ÇΩ</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b>"
        )
        await call.message.edit_text(text, reply_markup=_qty_kb("order", prod.id, qty, price_each), parse_mode="HTML")

@dp.callback_query(F.data.regexp(r"^order:make:(\d+):(\d+)$"))
async def cb_order_make(call: CallbackQuery):
    _, _, pid_str, qty_str = call.data.split(":")
    try:
        pid = int(pid_str)
        qty = max(1, int(qty_str))
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    user = call.from_user
    uid = user.id if user else 0
    uname = user.username if user and user.username else None

    async with Session() as s:
        prod = (await s.execute(select(Product).where(Product.id == pid))).scalar_one_or_none()
        if not prod:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        price_each = int(prod.price_wholesale or prod.price_retail or 0)
        if price_each <= 0:
            await call.answer("–ù–µ—Ç —Ü–µ–Ω—ã", show_alert=True)
            return

        order = await create_order(
            s,
            user_id=uid,
            username=uname,
            product_id=prod.id,
            product_name=prod.name,
            quantity=qty,
            price_each=price_each,
            order_type="wholesale",
        )
        await s.commit()

        total = price_each * qty
        # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏–∑ —à–∞–±–ª–æ–Ω–∞
        tpl = await get_template("order_received")
        contacts = await get_contacts_text()
        try:
            await bot.send_message(
                uid,
                render_template(
                    tpl,
                    product_name=f"{prod.name}{(dict(prod.extra_attrs or {}).get('flag') or '')}",
                    quantity=qty,
                    price_each=fmt_price(price_each),
                    total=fmt_price(total),
                    user_id=uid,
                    username=uname or "",
                    contacts=contacts
                ),
                disable_notification=True
            )
        except Exception:
            pass

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ 2 –∫–Ω–æ–ø–∫–∏)
    await _notify_managers_new_order(order, prod.name, price_each)
    await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É")

# === –ö–æ—Ä–∑–∏–Ω–∞ ===
@dp.callback_query(F.data.regexp(r"^(cart:start):(\d+)$"))
async def cb_cart_start(call: CallbackQuery):
    try:
        pid = int(call.data.split(":")[2])
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    async with Session() as s:
        prod = (await s.execute(select(Product).where(Product.id == pid))).scalar_one_or_none()
    if not prod:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    price_each = int(prod.price_wholesale or prod.price_retail or 0)
    if price_each <= 0:
        await call.answer("–ù–µ—Ç —Ü–µ–Ω—ã", show_alert=True)
        return
    # —Ñ–ª–∞–≥ —Ç–æ–≤–∞—Ä–∞
    try:
        ea = dict(prod.extra_attrs or {})
        flag = (ea.get("flag") or "").strip()
    except Exception:
        flag = ""
    text = (
        f"<b>{prod.name}{flag}</b>\n"
        f"–¶–µ–Ω–∞: <b>{fmt_price(price_each)} ‚ÇΩ</b>\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É."
    )
    await call.message.edit_text(text, reply_markup=_qty_kb("cart", prod.id, 1, price_each), parse_mode="HTML")

@dp.callback_query(F.data.regexp(r"^cart:qty:(\d+):(\d+)$"))
async def cb_cart_qty(call: CallbackQuery):
    _, _, pid_str, qty_str = call.data.split(":")
    try:
        pid = int(pid_str)
        qty = max(1, int(qty_str))
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", show_alert=True)
        return
    async with Session() as s:
        prod = (await s.execute(select(Product).where(Product.id == pid))).scalar_one_or_none()
    if not prod:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    price_each = int(prod.price_wholesale or prod.price_retail or 0)
    if price_each <= 0:
        await call.answer("–ù–µ—Ç —Ü–µ–Ω—ã", show_alert=True)
        return
    # —Ñ–ª–∞–≥ —Ç–æ–≤–∞—Ä–∞
    try:
        ea = dict(prod.extra_attrs or {})
        flag = (ea.get("flag") or "").strip()
    except Exception:
        flag = ""
    text = (
            f"<b>{prod.name}{flag}</b>\n"
            f"–¶–µ–Ω–∞: <b>{fmt_price(price_each)} ‚ÇΩ</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b>"
        )
    await call.message.edit_text(text, reply_markup=_qty_kb("cart", prod.id, qty, price_each), parse_mode="HTML")

@dp.callback_query(F.data.regexp(r"^cart:make:(\d+):(\d+)$"))
async def cb_cart_make(call: CallbackQuery):
    _, _, pid_str, qty_str = call.data.split(":")
    try:
        pid = int(pid_str)
        qty = max(1, int(qty_str))
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    uid = call.from_user.id
    async with Session() as s:
        prod = (await s.execute(select(Product).where(Product.id == pid))).scalar_one_or_none()
    if not prod:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    price_each = int(prod.price_wholesale or prod.price_retail or 0)
    if price_each <= 0:
        await call.answer("–ù–µ—Ç —Ü–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    current_items = await get_cart_items(uid)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    existing_item = None
    for item in current_items:
        if item["pid"] == pid:
            existing_item = item
            break
    
    if existing_item:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        existing_item["qty"] += qty
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        current_items.append({
            "pid": pid,
            "name": prod.name,
            "qty": qty,
            "price_each": price_each
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await update_cart_items(uid, current_items)
    
    total = await cart_total_db(uid)
    count = await cart_count_db(uid)
    
    log.info(f"Cart updated for user {uid}: {count} items, total {total}")
    log.info(f"Cart contents: {current_items}")
    
    try:
        await call.message.edit_text(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!</b>\n\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {prod.name}{(dict(prod.extra_attrs or {}).get('flag') or '')}\n"
            f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {qty} —à—Ç.\n\n"
            f"üß∫ <b>–í –∫–æ—Ä–∑–∏–Ω–µ:</b> {count} –ø–æ–∑–∏—Ü–∏–π\n"
            f"üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {fmt_price(total)} ‚ÇΩ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üß∫ –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:open")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ]),
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        await update_main_menu_for_user(uid, call.bot)
    except TelegramBadRequest:
        pass
    await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ")

@dp.callback_query(F.data == "cart:open")
async def cb_cart_open(call: CallbackQuery):
    uid = call.from_user.id
    items = await get_cart_items(uid)
    
    log.info(f"Opening cart for user {uid}: {len(items)} items")
    log.info(f"Cart contents: {items}")
    
    if not items:
        await call.message.edit_text("üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\nüí° <i>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.</i>", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]), parse_mode="HTML")
        await call.answer()
        return
    lines = ["üß∫ <b>–ö–æ—Ä–∑–∏–Ω–∞</b>"]
    for it in items[:12]:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –∫ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        name_with_flag = it['name']
        try:
            async with Session() as s:
                prod = (await s.execute(select(Product).where(Product.id == it["pid"]))).scalar_one_or_none()
                if prod:
                    ea = dict(prod.extra_attrs or {})
                    flag = (ea.get("flag") or "").strip()
                    if flag:
                        name_with_flag = f"{name_with_flag}{flag}"
        except Exception:
            pass
        lines.append(f"‚Ä¢ {html.quote(name_with_flag)} √ó {it['qty']} = {fmt_price(it['qty']*it['price_each'])} ‚ÇΩ")
    if len(items) > 12:
        lines.append(f"‚Ä¶ –∏ –µ—â—ë {len(items)-12} –ø–æ–∑–∏—Ü–∏–π")
    total = await cart_total_db(uid)
    lines.append(f"\n–ò—Ç–æ–≥–æ: <b>{fmt_price(total)} ‚ÇΩ</b>")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="cart:checkout")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clear")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await call.message.edit_text("\n".join(lines), reply_markup=kb, parse_mode="HTML")
    await call.answer()

@dp.callback_query(F.data == "cart:clear")
async def cb_cart_clear(call: CallbackQuery):
    uid = call.from_user.id
    await clear_cart_db(uid)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (—Ç–µ–ø–µ—Ä—å 0)
    await update_main_menu_for_user(uid, call.bot)
    
    await call.message.edit_text("üóëÔ∏è <b>–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\nüí° <i>–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.</i>", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]), parse_mode="HTML")
    await call.answer("–û—á–∏—â–µ–Ω–æ")

@dp.callback_query(F.data == "cart:checkout")
async def cb_cart_checkout(call: CallbackQuery):
    uid = call.from_user.id
    uname = call.from_user.username or ""
    items = await get_cart_items(uid)
    if not items:
        await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return
    created_orders = []
    async with Session() as s:
        for it in items:
            prod = (await s.execute(select(Product).where(Product.id == it["pid"]))).scalar_one_or_none()
            if not prod:
                continue
            price_each = int(prod.price_wholesale or prod.price_retail or 0)
            if price_each <= 0:
                continue
            order = await create_order(
                s,
                user_id=uid,
                username=uname,
                product_id=prod.id,
                product_name=prod.name,
                quantity=int(it["qty"]),
                price_each=price_each,
                order_type="wholesale",
            )
            # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ extra_attrs
            try:
                ea = dict(prod.extra_attrs or {})
                flag = (ea.get("flag") or "").strip()
            except Exception:
                flag = ""
            name_with_flag = f"{prod.name}{flag}" if flag else prod.name
            created_orders.append((order, name_with_flag, price_each, int(it["qty"])))
        await s.commit()

    if not created_orders:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (—Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã).", show_alert=True)
        return

    total_sum = sum(pe*qty for _, _, pe, qty in created_orders)
    contacts = await get_contacts_text()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å —Ñ–ª–∞–≥–∞–º–∏
    cart_items_text = ""
    for order, prod_name, price_each, qty in created_orders:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î
        flag = ""
        is_used_flag = False
        try:
            async with Session() as s:
                prod = (await s.execute(select(Product).where(Product.id == order.product_id))).scalar_one_or_none()
                if prod:
                    is_used_flag = bool(prod.is_used)
                    ea = dict(prod.extra_attrs or {})
                    flag = (ea.get("flag") or "").strip()
        except Exception:
            flag = ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ñ–ª–∞–≥–æ–º (prod_name —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–ª–∞–≥)
        prod_label = f"{prod_name}{' (–ë/–£)' if is_used_flag else ''}"
        cart_items_text += f"‚Ä¢ {prod_label} √ó {qty} —à—Ç. = {fmt_price(price_each * qty)} ‚ÇΩ\n"
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π)
    total_items_count = sum(int(it["qty"]) for it in items)
    
    tpl_cart = await get_template("cart_checkout_summary")
    try:
        await bot.send_message(
            uid,
            render_template(tpl_cart, 
                          items_count=total_items_count, 
                          total=fmt_price(total_sum), 
                          contacts=contacts,
                          cart_items=cart_items_text.strip()),
            disable_notification=True
        )
    except Exception:
        pass

    for order, prod_name, price_each, qty in created_orders:
        await _notify_managers_new_order(order, prod_name, price_each)

    await clear_cart_db(uid)  # –æ—á–∏—Å—Ç–∏–º –∫–æ—Ä–∑–∏–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (—Ç–µ–ø–µ—Ä—å 0)
    await update_main_menu_for_user(uid, call.bot)
    
    try:
        await call.message.edit_text("üéâ <b>–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n‚úÖ <i>–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.</i>\n\nüìû <i>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</i>", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        ), parse_mode="HTML")
    except TelegramBadRequest:
        pass
    await call.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–æ")

# -----------------------------------------------------------------------------
# –ü–µ—Ä–µ—Å–∫–∞–Ω –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤ (–æ–ø—Ç)
# -----------------------------------------------------------------------------
# –í–ê–ñ–ù–û: ¬´—Ç–æ–ª—å–∫–æ /1000¬ª ‚Äî —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏, –∞ –º—è–≥–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤–µ–ª–∏–∫–∞.
# –†–∞–∑—Ä–µ—à–∞–µ–º —é–Ω–∏–∫–æ–¥–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã (‚Äì ‚Äî ‚Äë) –∏ –∑–∞–ø—è—Ç—É—é –≤ —Ü–µ–Ω–µ
# –î–µ–ª–∞–µ–º –∏–º—è –∂–∞–¥–Ω—ã–º (.+), —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª—Å—è –±–ª–∏–∂–µ –∫ —Ü–µ–Ω–µ, –∞ –Ω–µ –≤ –º–æ–¥–µ–ª–∏ —Ç–∏–ø–∞ "WF-1000XM5"
PRICE_RE = re.compile(r"^\s*(?P<name>.+)\s*[-:‚Äì‚Äî‚Äë]\s*(?P<price>[\d\s.,]{2,})(?P<rest>.*)$")

def _extract_flag(text: str) -> str:
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å —Ñ–ª–∞–≥ (emoji-—Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã) –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    try:
        flag_match = re.search(r"[\U0001F1E6-\U0001F1FF]{2}", text)
        return flag_match.group(0) if flag_match else ""
    except Exception:
        return ""

def parse_lines(text: str) -> List[Tuple[str, int, str]]:
    items = []  # type: list[tuple[str, int, str]]
    for raw in (text or "").splitlines():
        m = PRICE_RE.match(raw)
        if not m:
            continue
        name = m.group("name").strip()
        price_str = m.group("price") or ""
        rest = m.group("rest") or ""
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã: —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–µ–∫
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ —Ç–∏–ø–∞ "5.990—Ä" -> "5990"
        price_clean = re.sub(r"[^\d.]", "", price_str)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º - —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á –∏–ª–∏ –∫–æ–ø–µ–π–∫–∏
        if "." in price_clean:
            parts = price_clean.split(".")
            if len(parts) == 2:
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ 3 —Ü–∏—Ñ—Ä—ã - —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á (5.990)
                if len(parts[1]) == 3:
                    price_clean = parts[0] + parts[1]
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ 1-2 —Ü–∏—Ñ—Ä—ã - —ç—Ç–æ –∫–æ–ø–µ–π–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Ö
                elif len(parts[1]) <= 2:
                    price_clean = parts[0]
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –±–æ–ª—å—à–µ 3 —Ü–∏—Ñ—Ä - —ç—Ç–æ —Ç–æ–∂–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á (10.500)
                else:
                    price_clean = parts[0] + parts[1]
            elif len(parts) > 2:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ - —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á (1.234.567)
                price_clean = "".join(parts)
        
        if not price_clean:
            continue
        try:
            price = int(price_clean)
        except Exception:
            continue
        if price <= 0:
            continue
        # –∑–∞—â–∏—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π: —Ç–æ–ª—å–∫–æ –¥–µ–ª–∏–º –Ω–∞ 1000, –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–µ–ª–∏–º –Ω–∞ 100
        # –ø—Ä–∏–º–µ—Ä: "50000000" -> "50000", –µ—Å–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç—Ä–∏ –ª–∏—à–Ω–∏—Ö –Ω—É–ª—è
        if price > 2_000_000 and price % 1000 == 0 and (price // 1000) <= 5_000_000:
            price //= 1000
        if price > 5_000_000:
            continue
        
        # –ò—â–µ–º —Ñ–ª–∞–≥–∏ –≤ —Å—Ç—Ä–æ–∫–µ - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
        flags = []
        # –ò—â–µ–º —Ñ–ª–∞–≥–∏ –≤ —Ö–≤–æ—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ —Ü–µ–Ω—ã)
        flag_matches = re.findall(r"[\U0001F1E6-\U0001F1FF]{2}", rest)
        flags.extend(flag_matches)
        # –ò—â–µ–º —Ñ–ª–∞–≥–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        flag_matches = re.findall(r"[\U0001F1E6-\U0001F1FF]{2}", name)
        flags.extend(flag_matches)
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        clean_name = re.sub(r"[\U0001F1E6-\U0001F1FF]{2}\s*", "", name).strip()
        
        if flags:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–ª–∞–≥–∞
            for flag in flags:
                items.append((clean_name, price, flag))
        else:
            # –ï—Å–ª–∏ —Ñ–ª–∞–≥–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–ª–∞–≥–∞
            items.append((clean_name, price, ""))
    return items

def parse_used_attrs(name: str) -> dict:
    s = (name or "").lower()
    attrs: dict = {}
    m = re.search(r"(\d+)\s*(?:–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–Ω–µ–¥–µ–ª)", s)
    if m:
        attrs["usage_hint"] = m.group(0)
    if "–ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç" in s:
        attrs["kit"] = "full"
    if "–±–µ–∑ –∫–æ—Ä–æ–±" in s:
        attrs["kit"] = "no_box"
    return attrs

def norm_key(name: str, flag: str = "") -> str:
    s = (name or "").lower()
    s = re.sub(r"\s+", " ", s).strip()
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if flag:
        s = f"{s}|{flag}"
    return s

async def safe_edit_message(message, text=None, reply_markup=None, parse_mode=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if text is not None:
            await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        elif reply_markup is not None:
            await message.edit_reply_markup(reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        else:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise

def _now_ms() -> int:
    return int(time.time() * 1000)

async def _safe_copy_and_read_text(bot: Bot, sink_id: int, from_chat_id: int, message_id: int, *, max_retries: int = 3) -> str:
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    delay = 0.5
    for attempt in range(1, max_retries + 1):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_chat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
            chat = await bot.get_chat(from_chat_id)
            log.info(f"Got chat: {chat.title}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ forward_message
            forwarded = await bot.forward_message(
                chat_id=sink_id,
                from_chat_id=from_chat_id,
                message_id=message_id,
                disable_notification=True
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = ""
            if hasattr(forwarded, 'text') and forwarded.text:
                text = forwarded.text
            elif hasattr(forwarded, 'caption') and forwarded.caption:
                text = forwarded.caption
            
            # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await bot.delete_message(chat_id=sink_id, message_id=forwarded.message_id)
            except TelegramBadRequest:
                pass
            
            log.info(f"Got text from message {message_id}: {text[:100]}...")
            return text
            
        except TelegramRetryAfter as e:
            await asyncio.sleep(float(getattr(e, "retry_after", 1.0)) + 0.5)
        except TelegramAPIError as e:
            log.error(f"Error accessing message {message_id}: {e}")
            if attempt == max_retries:
                raise
            await asyncio.sleep(delay)
            delay = min(delay * 2, 4.0)
    return ""

@dp.message(Command("rescan"))
async def cmd_rescan(message: Message):
    if not message.from_user or not await _is_manager(message.from_user.id, message.from_user.username, 'wholesale'):
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if not (SINK_CHAT_ID and CHANNEL_ID_OPT):
        await message.answer("‚ùó –ù—É–∂–Ω—ã SINK_CHAT_ID –∏ CHANNEL_ID_OPT –≤ .env")
        return

    await message.answer("üîÑ –ü–µ—Ä–µ—Å–∫–∞–Ω –æ–ø—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤‚Ä¶ (—è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å)")

    async with Session() as s:
        posts = (await s.execute(
            select(MonitoredPost)
            .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
            .where(MonitoredPost.is_active == True)
            .order_by(MonitoredPost.message_id)
        )).scalars().all()

    total = len(posts)
    done = 0
    ok = 0
    fail = 0
    last_progress_ts = _now_ms()

    async def _tick():
        await asyncio.sleep(0.2)

    for post in posts:
        try:
            text_msg = await _safe_copy_and_read_text(bot, SINK_CHAT_ID, post.channel_id, post.message_id)
            await upsert_for_message_rescan(post.channel_id, post.message_id, post.category or "", text_msg, post.is_used)
            ok += 1
        except Exception:
            fail += 1
        finally:
            done += 1
            await _tick()
            now = _now_ms()
            if now - last_progress_ts > 2500:
                last_progress_ts = now
                try:
                    await message.answer(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {done}/{total} (—É—Å–ø–µ—Ö–æ–≤: {ok}, –æ—à–∏–±–æ–∫: {fail})")
                except Exception:
                    pass

    await message.answer(f"‚úÖ –ü–µ—Ä–µ—Å–∫–∞–Ω –∑–∞–≤–µ—Ä—à—ë–Ω. –£—Å–ø–µ—Ö–æ–≤: {ok}, –æ—à–∏–±–æ–∫: {fail}")

async def upsert_for_message_rescan(channel_id: int, message_id: int, category: str, text: str, is_used: bool):
    """
    –ú–∏–Ω–∏-–≤–µ—Ä—Å–∏—è upsert –ª–æ–≥–∏–∫–∏ –¥–ª—è /rescan. –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É –ø–æ—Å—Ç—É.
    """
    now = datetime.now(UTC).replace(tzinfo=None)
    rows = parse_lines(text)
    keys_in_post = set()

    async with Session() as s:
        for order_index, (name, price, flag) in enumerate(rows, 1):
            key = norm_key(name, flag)
            keys_in_post.add(key)

            prod = (await s.execute(
                select(Product).where(
                    and_(
                        Product.channel_id == channel_id,
                        Product.group_message_id == message_id,
                        Product.key == key,
                        Product.is_used == is_used
                    )
                )
            )).scalar_one_or_none()

            if not prod:
                prod = Product(
                    channel_id=channel_id,
                    group_message_id=message_id,
                    name=name[:400],
                    key=key,
                    category=category,
                    available=True,
                    is_used=is_used,
                    order_index=order_index,
                    extra_attrs=(
                        {
                            **(parse_used_attrs(name) if is_used else {}),
                            **({"flag": flag} if flag else {})
                        } or None
                    ),
                    updated_at=now
                )
                prod.price_wholesale = price
                s.add(prod)
            else:
                prod.price_wholesale = price
                prod.name = name[:400]
                prod.available = True
                prod.order_index = order_index
                if category:
                    prod.category = category
                prod.is_used = is_used
                # –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–ø–æ–ª–Ω—è–µ–º extra_attrs
                try:
                    cur = dict(prod.extra_attrs or {})
                except Exception:
                    cur = {}
                if is_used:
                    cur.update(parse_used_attrs(name))
                if flag:
                    cur["flag"] = flag
                prod.extra_attrs = cur or None
                prod.updated_at = now

        if keys_in_post:
            await s.execute(
                update(Product)
                .where(
                    and_(
                        Product.channel_id == channel_id,
                        Product.group_message_id == message_id,
                        Product.is_used == is_used,
                        not_(Product.key.in_(keys_in_post))
                    )
                )
                .values(
                    available=False,
                    price_wholesale=None,
                    updated_at=now
                )
            )

        await s.commit()

# --- Reply-–º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ ----------------

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é):
BTN_CATALOG = "üì± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"
BTN_CONTACTS = "üìç –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
BTN_CART = "üß∫ –ö–æ—Ä–∑–∏–Ω–∞"
BTN_RESCAN = "üîÑ –ü–µ—Ä–µ—Å–∫–∞–Ω"
BTN_DIAG = "üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
BTN_SETTINGS = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
BTN_RESCAN_ADMIN = "üîÑ –ü–µ—Ä–µ—Å–∫–∞–Ω (–∞–¥–º–∏–Ω)"
BTN_DIAG_ADMIN = "üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"
BTN_SETTINGS_ADMIN = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–¥–º–∏–Ω)"

# # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ iPhone
# BTN_FILTER_ALL = "üîÑ –í—Å–µ iPhone"
# BTN_FILTER_NEW = "üÜï –ù–æ–≤—ã–µ"
# BTN_FILTER_USED = "üîß –ë/–£"
# BTN_FILTER_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"

# # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
# BTN_FILTER_CLEAR = "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
# BTN_FILTER_BACK_TO_MENU = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
# BTN_FILTER_APPLY = "‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"

# # –ö–Ω–æ–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
# BTN_FILTER_COUNTRY = "üåç –°—Ç—Ä–∞–Ω–∞"
# BTN_FILTER_COLOR = "üé® –¶–≤–µ—Ç"
# BTN_FILTER_CONDITION = "üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ"

# # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π iPhone
# BTN_IPHONE_11 = "üì± iPhone 11"
# BTN_IPHONE_12 = "üì± iPhone 12"
# BTN_IPHONE_13 = "üì± iPhone 13"
# BTN_IPHONE_14 = "üì± iPhone 14"
# BTN_IPHONE_15 = "üì± iPhone 15"
# BTN_IPHONE_16 = "üì± iPhone 16"
# BTN_IPHONE_17 = "üì± iPhone 17"

# # –ö–Ω–æ–ø–∫–∏ –ø–∞–º—è—Ç–∏
# BTN_MEMORY_64 = "üíæ 64GB"
# BTN_MEMORY_128 = "üíæ 128GB"
# BTN_MEMORY_256 = "üíæ 256GB"
# BTN_MEMORY_512 = "üíæ 512GB"
# BTN_MEMORY_1TB = "üíæ 1TB"

# async def main_menu_kb(user_id: Optional[int]) -> ReplyKeyboardMarkup:
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
#     cart_text = BTN_CART
#     if user_id:
#         try:
#             cart_count = await cart_count_db(user_id)
#             if cart_count > 0:
#                 cart_text = f"{BTN_CART} ({cart_count})"
#         except Exception:
#             pass  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    
#     rows = [  # type: list[list[KeyboardButton]]
#         [KeyboardButton(text=BTN_CATALOG)],
#         [KeyboardButton(text=BTN_CONTACTS), KeyboardButton(text=cart_text)],
#     ]
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ (–∏–∑ .env –∏–ª–∏ –ë–î)
#     is_manager = False
#     if user_id:
#         # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º .env (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
#         if MANAGER_USER_IDS and user_id in MANAGER_USER_IDS:
#             is_manager = True
#         else:
#             # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
#             is_manager = await _is_manager(user_id, channel_type='wholesale')
    
#     if is_manager:
#         # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ (–∞–¥–º–∏–Ω)
#         rows.append([KeyboardButton(text=BTN_RESCAN_ADMIN), KeyboardButton(text=BTN_DIAG_ADMIN)])
#         rows.append([KeyboardButton(text=BTN_SETTINGS_ADMIN)])
    
#     return ReplyKeyboardMarkup(
#         keyboard=rows,
#         resize_keyboard=True,
#         input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶"
#     )

# def filter_menu_kb(user_id: int = None) -> ReplyKeyboardMarkup:
#     """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è iPhone"""
#     keyboard = [
#             [KeyboardButton(text=BTN_FILTER_ALL)],
#             [KeyboardButton(text=BTN_FILTER_NEW), KeyboardButton(text=BTN_FILTER_USED)],
#     ]
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
#     if user_id:
#         state = get_iphone_filter_state(user_id)
        
#         # –ö–Ω–æ–ø–∫–∞ –º–æ–¥–µ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
#         model_text = "üì± –ü–æ –º–æ–¥–µ–ª–∏"
#         if "model" in state["active_filters"]:
#             model_text = f"üì± {state['active_filters']['model']}"
#         keyboard.append([KeyboardButton(text=model_text)])
        
#         # –ö–Ω–æ–ø–∫–∞ –ø–∞–º—è—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é  
#         memory_text = "üíæ –ü–æ –ø–∞–º—è—Ç–∏"
#         if "memory" in state["active_filters"]:
#             memory_text = f"üíæ {state['active_filters']['memory']}"
#         keyboard.append([KeyboardButton(text=memory_text)])
        
#         # –ö–Ω–æ–ø–∫–∞ —Å—Ç—Ä–∞–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
#         country_text = BTN_FILTER_COUNTRY
#         if "country" in state["active_filters"]:
#             country_text = f"üåç {state['active_filters']['country']}"
#         keyboard.append([KeyboardButton(text=country_text)])
        
#         # –ö–Ω–æ–ø–∫–∞ —Ü–≤–µ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
#         color_text = BTN_FILTER_COLOR
#         if "color" in state["active_filters"]:
#             color_text = f"üé® {state['active_filters']['color']}"
#         keyboard.append([KeyboardButton(text=color_text)])
        
#         # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
#         if state["active_filters"]:
#             keyboard.append([KeyboardButton(text=BTN_FILTER_CLEAR)])
#     else:
#         # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#         keyboard.extend([
#             [KeyboardButton(text="üì± –ü–æ –º–æ–¥–µ–ª–∏"), KeyboardButton(text="üíæ –ü–æ –ø–∞–º—è—Ç–∏")],
#             [KeyboardButton(text=BTN_FILTER_COUNTRY), KeyboardButton(text=BTN_FILTER_COLOR)],
#         ])
    
#     keyboard.append([KeyboardButton(text=BTN_FILTER_BACK)])
#     keyboard.append([KeyboardButton(text=BTN_FILTER_BACK_TO_MENU)])
    
#     return ReplyKeyboardMarkup(
#         keyboard=keyboard,
#         resize_keyboard=True,
#         input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä‚Ä¶"
#     )

# async def iphone_models_kb(user_id: int = None) -> ReplyKeyboardMarkup:
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ iPhone —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
#     model_groups = get_iphone_model_groups()
#     keyboard = []
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     current_filters = get_iphone_filter_state(user_id)["active_filters"] if user_id else {}
    
#     # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
#     counts = await get_filter_counts(user_id, current_filters)
#     model_counts = counts.get("models", {})
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –º–æ–¥–µ–ª–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
#     for group_name in model_groups.keys():
#         count = model_counts.get(group_name, 0)
#         button_text = f"üì± {group_name}"
#         if count > 0:
#             button_text += f" ({count})"
#         keyboard.append([KeyboardButton(text=button_text)])
    
#     keyboard.extend([
#         [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º")],
#         [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
#     ])
    
#     return ReplyKeyboardMarkup(
#         keyboard=keyboard,
#         resize_keyboard=True,
#         input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å‚Ä¶"
#     )

# async def iphone_memory_kb(user_id: int = None) -> ReplyKeyboardMarkup:
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–º–∞ –ø–∞–º—è—Ç–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     current_filters = get_iphone_filter_state(user_id)["active_filters"] if user_id else {}
    
#     # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–º—è—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
#     counts = await get_filter_counts(user_id, current_filters)
#     memory_counts = counts.get("memories", {})
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
#     memory_buttons = []
#     memory_groups = get_iphone_memory_groups()
    
#     for group_name in memory_groups.keys():
#         count = memory_counts.get(group_name, 0)
#         button_text = f"üíæ {group_name}"
#         if count > 0:
#             button_text += f" ({count})"
#         memory_buttons.append(KeyboardButton(text=button_text))
    
#     # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
#     keyboard = []
#     for i in range(0, len(memory_buttons), 2):
#         row = memory_buttons[i:i+2]
#         keyboard.append(row)
    
#     keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º")])
    
#     return ReplyKeyboardMarkup(
#         keyboard=keyboard,
#         resize_keyboard=True,
#         input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–º—è—Ç—å‚Ä¶"
#     )

# async def iphone_country_kb(user_id: int = None) -> ReplyKeyboardMarkup:
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
#     country_groups = get_iphone_country_groups()
#     keyboard = []
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     current_filters = get_iphone_filter_state(user_id)["active_filters"] if user_id else {}
    
#     # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
#     counts = await get_filter_counts(user_id, current_filters)
#     country_counts = counts.get("countries", {})
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
#     for country_name in country_groups.keys():
#         count = country_counts.get(country_name, 0)
#         button_text = country_name
#         if count > 0:
#             button_text += f" ({count})"
#         keyboard.append([KeyboardButton(text=button_text)])
    
#     keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º")])
    
#     return ReplyKeyboardMarkup(
#         keyboard=keyboard,
#         resize_keyboard=True,
#         input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É‚Ä¶"
#     )

# async def iphone_color_kb(user_id: int = None) -> ReplyKeyboardMarkup:
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ iPhone —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
#     color_groups = get_iphone_color_groups()
#     keyboard = []
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     current_filters = get_iphone_filter_state(user_id)["active_filters"] if user_id else {}
    
#     # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
#     counts = await get_filter_counts(user_id, current_filters)
#     color_counts = counts.get("colors", {})
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
#     for color_name in color_groups.keys():
#         count = color_counts.get(color_name, 0)
#         button_text = f"üé® {color_name}"
#         if count > 0:
#             button_text += f" ({count})"
#         keyboard.append([KeyboardButton(text=button_text)])
    
#     keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º")])
    
#     return ReplyKeyboardMarkup(
#         keyboard=keyboard,
#         resize_keyboard=True,
#         input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç‚Ä¶"
#     )

@dp.message(Command("menu"))
async def on_menu(m: Message):
    try:
        user_id = m.from_user.id if m.from_user else 0
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        message = await m.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                       parse_mode="HTML", 
                       reply_markup=await main_menu_kb(user_id, m.chat.type))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        LAST_MAIN_MENU_MESSAGE[user_id] = message.message_id
    except Exception as e:
        log.error(f"Error sending main menu: {e}")
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")


@dp.message(Command("start"))
async def on_start(m: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≥–ª–∞—Å–∏—è"""
    user_id = m.from_user.id if m.from_user else 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    has_consent = await ConsentManager.check_user_consent(user_id)
    
    if not has_consent:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î
        from app_store.privacy.consent_manager import CONSENT_TEXTS
        await m.answer(
            CONSENT_TEXTS["welcome_wholesale"],
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_agree"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="consent_decline")
                ],
                # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
            ])
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            message = await m.answer(
                "üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–ø—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω!</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=await main_menu_kb(user_id, m.chat.type)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            LAST_MAIN_MENU_MESSAGE[user_id] = message.message_id
        except Exception as e:
            log.error(f"Error sending main menu: {e}")
            await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

@dp.message(F.text.casefold() == BTN_CATALOG.casefold())
async def on_catalog_button(m: Message):
    cats = await fetch_categories()
    if not cats:
        await m.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–æ.", reply_markup=await main_menu_kb(m.from_user.id if m.from_user else 0, m.chat.type))
        return
    max_row_chars = 34 if any(len(t) > 16 for t, _ in cats) else 40
    kb = adaptive_kb(cats, max_per_row=2, max_row_chars=max_row_chars)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.message(F.text.casefold() == BTN_CONTACTS.casefold())
async def on_contacts(m: Message):
    contacts = await get_contacts_text()
    await m.answer(contacts, reply_markup=await main_menu_kb(m.from_user.id if m.from_user else 0, m.chat.type))

@dp.message(F.text.casefold().startswith(BTN_CART.casefold()))
async def on_cart_btn(m: Message):
    uid = m.from_user.id if m.from_user else 0
    items = await get_cart_items(uid)
    
    log.info(f"Cart button pressed by user {uid}")
    log.info(f"Cart contents: {items}")
    log.info(f"Total items in cart: {len(items)}")
    
    if not items:
        await m.answer("üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\nüí° <i>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.</i>", reply_markup=await main_menu_kb(uid, m.chat.type), parse_mode="HTML")
        return
    lines = ["üß∫ <b>–ö–æ—Ä–∑–∏–Ω–∞</b>"]
    for it in items[:12]:
        lines.append(f"‚Ä¢ {html.quote(it['name'])} √ó {it['qty']} = {fmt_price(it['qty']*it['price_each'])} ‚ÇΩ")
    if len(items) > 12:
        lines.append(f"‚Ä¶ –∏ –µ—â—ë {len(items)-12} –ø–æ–∑–∏—Ü–∏–π")
    total = await cart_total_db(uid)
    lines.append(f"\n–ò—Ç–æ–≥–æ: <b>{fmt_price(total)} ‚ÇΩ</b>")
    await m.answer("\n".join(lines), parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="cart:checkout")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clear")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def on_back_to_menu(m: Message):
    user_id = m.from_user.id if m.from_user else 0
    message = await m.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="HTML", reply_markup=await main_menu_kb(user_id, m.chat.type))
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    LAST_MAIN_MENU_MESSAGE[user_id] = message.message_id

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ iPhone
# @dp.message(F.text == BTN_FILTER_ALL)
# async def on_filter_all(m: Message):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ iPhone (–Ω–æ–≤—ã–µ –∏ –ë/–£)"""
#     user_id = m.from_user.id if m.from_user else 0
#     clear_iphone_filter(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
#     await show_iphone_products(m, show_all=True)

# @dp.message(F.text == BTN_FILTER_NEW)
# async def on_filter_new(m: Message):
#     """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ iPhone"""
#     user_id = m.from_user.id if m.from_user else 0
#     set_iphone_filter(user_id, "condition", "–ù–æ–≤—ã–µ")
#     await show_iphone_products_with_filters(m, {"condition": "–ù–æ–≤—ã–µ"})

# @dp.message(F.text == BTN_FILTER_USED)
# async def on_filter_used(m: Message):
#     """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ë/–£ iPhone"""
#     user_id = m.from_user.id if m.from_user else 0
#     set_iphone_filter(user_id, "condition", "–ë/–£")
#     await show_iphone_products_with_filters(m, {"condition": "–ë/–£"})

# @dp.message(F.text == BTN_FILTER_BACK)
# async def on_filter_back(m: Message):
#     """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
#     cats = await fetch_categories()
#     if not cats:
#         await m.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–æ.", reply_markup=await main_menu_kb(m.from_user.id if m.from_user else 0, m.chat.type))
#         return
#     max_row_chars = 34 if any(len(t) > 16 for t, _ in cats) else 40
#     kb = adaptive_kb(cats, max_per_row=2, max_row_chars=max_row_chars)
#     await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
# @dp.message(F.text == "üì± –ü–æ –º–æ–¥–µ–ª–∏")
# async def on_filter_by_model(m: Message):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
#     user_id = m.from_user.id if m.from_user else 0
#     state = get_iphone_filter_state(user_id)
#     state["current_step"] = "model"
    
#     text = "üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:</b>\n\n"
#     text += f"<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {get_iphone_filter_summary(user_id)}"
    
#     await m.answer(text, parse_mode="HTML", reply_markup=await iphone_models_kb(user_id))

# @dp.message(F.text == "üíæ –ü–æ –ø–∞–º—è—Ç–∏")
# async def on_filter_by_memory(m: Message):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–∞–º—è—Ç–∏"""
#     user_id = m.from_user.id if m.from_user else 0
#     state = get_iphone_filter_state(user_id)
#     state["current_step"] = "memory"
    
#     text = "üíæ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏:</b>\n\n"
#     text += f"<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {get_iphone_filter_summary(user_id)}"
    
#     await m.answer(text, parse_mode="HTML", reply_markup=await iphone_memory_kb(user_id))

# @dp.message(F.text == BTN_FILTER_COUNTRY)
# async def on_filter_by_country(m: Message):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
#     user_id = m.from_user.id if m.from_user else 0
#     state = get_iphone_filter_state(user_id)
#     state["current_step"] = "country"
    
#     text = "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:</b>\n\n"
#     text += f"<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {get_iphone_filter_summary(user_id)}"
    
#     await m.answer(text, parse_mode="HTML", reply_markup=await iphone_country_kb(user_id))

# @dp.message(F.text == BTN_FILTER_COLOR)
# async def on_filter_by_color(m: Message):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞"""
#     user_id = m.from_user.id if m.from_user else 0
#     state = get_iphone_filter_state(user_id)
#     state["current_step"] = "color"
    
#     text = "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç iPhone:</b>\n\n"
#     text += f"<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {get_iphone_filter_summary(user_id)}"
    
#     await m.answer(text, parse_mode="HTML", reply_markup=await iphone_color_kb(user_id))

# @dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º")
# async def on_back_to_filters(m: Message):
#     """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º"""
#     user_id = m.from_user.id if m.from_user else 0
#     text = "üì± <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è iPhone</b>\n\n"
#     text += f"<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {get_iphone_filter_summary(user_id)}\n\n"
#     text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
    
#     await m.answer(text, parse_mode="HTML", reply_markup=filter_menu_kb(user_id))

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π iPhone —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
# @dp.message(F.text.regexp(r"^üì± (.+)$"))
# async def on_iphone_model_group(m: Message):
#     """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ–ª–µ–π iPhone"""
#     user_id = m.from_user.id if m.from_user else 0
#     model_text = m.text.replace("üì± ", "").strip()
    
#     # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
#     model_group = model_text.split(" (")[0]
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä
#     state = get_iphone_filter_state(user_id)
#     if "model" in state["active_filters"] and state["active_filters"]["model"] == model_group:
#         # –°–Ω–∏–º–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
#         clear_iphone_filter(user_id, "model")
#         await m.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥–µ–ª–∏ '{model_group}' —Å–Ω—è—Ç")
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
#         await show_iphone_products(m, show_all=True)
#     else:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
#         set_iphone_filter(user_id, "model", model_group)
#         # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
#         state = get_iphone_filter_state(user_id)
#         await show_iphone_products_with_filters(m, state["active_filters"])

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–º—è—Ç–∏
# @dp.message(F.text.regexp(r"^üíæ (.+)$"))
# async def on_iphone_memory(m: Message):
#     """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–º—É –ø–∞–º—è—Ç–∏"""
#     user_id = m.from_user.id if m.from_user else 0
#     memory_text = m.text.replace("üíæ ", "").strip()
    
#     # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
#     memory = memory_text.split(" (")[0]
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä
#     state = get_iphone_filter_state(user_id)
#     if "memory" in state["active_filters"] and state["active_filters"]["memory"] == memory:
#         # –°–Ω–∏–º–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
#         clear_iphone_filter(user_id, "memory")
#         await m.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞–º—è—Ç–∏ '{memory}' —Å–Ω—è—Ç")
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
#         await show_iphone_products(m, show_all=True)
#     else:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
#         set_iphone_filter(user_id, "memory", memory)
#         # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
#         state = get_iphone_filter_state(user_id)
#         await show_iphone_products_with_filters(m, state["active_filters"])

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
# @dp.message(F.text.regexp(r"^üá¶üá™ –û–ê–≠|^üáÆüá≥ –ò–Ω–¥–∏—è|^üá≠üá∞ –ì–æ–Ω–∫–æ–Ω–≥|^üá∫üá∏ –°–®–ê|^üáØüáµ –Ø–ø–æ–Ω–∏—è|^üá™üá∫ –ï–≤—Ä–æ–ø–∞"))
# async def on_iphone_country(m: Message):
#     """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"""
#     user_id = m.from_user.id if m.from_user else 0
#     country_text = m.text
    
#     # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
#     country = country_text.split(" (")[0]
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä
#     state = get_iphone_filter_state(user_id)
#     if "country" in state["active_filters"] and state["active_filters"]["country"] == country:
#         # –°–Ω–∏–º–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
#         clear_iphone_filter(user_id, "country")
#         await m.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ '{country}' —Å–Ω—è—Ç")
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
#         await show_iphone_products(m, show_all=True)
#     else:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
#         set_iphone_filter(user_id, "country", country)
#         # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
#         state = get_iphone_filter_state(user_id)
#         await show_iphone_products_with_filters(m, state["active_filters"])

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–∞
# @dp.message(F.text.regexp(r"^üé® (.+)$"))
# async def on_iphone_color_group(m: Message):
#     """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ —Ü–≤–µ—Ç–æ–≤ iPhone"""
#     user_id = m.from_user.id if m.from_user else 0
#     color_text = m.text.replace("üé® ", "").strip()
    
#     # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
#     color_group = color_text.split(" (")[0]
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä
#     state = get_iphone_filter_state(user_id)
#     if "color" in state["active_filters"] and state["active_filters"]["color"] == color_group:
#         # –°–Ω–∏–º–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
#         clear_iphone_filter(user_id, "color")
#         await m.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç—É '{color_group}' —Å–Ω—è—Ç")
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
#         await show_iphone_products(m, show_all=True)
#     else:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
#         set_iphone_filter(user_id, "color", color_group)
#         # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
#         state = get_iphone_filter_state(user_id)
#         await show_iphone_products_with_filters(m, state["active_filters"])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
# @dp.message(F.text.regexp(r"^üì± (iPhone \d+)$"))
# async def on_iphone_model_toggle(m: Message):
#     """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –º–æ–¥–µ–ª–∏ iPhone"""
#     user_id = m.from_user.id if m.from_user else 0
#     model = m.text.replace("üì± ", "").strip()
#     state = get_iphone_filter_state(user_id)
#     
#     # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä - —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
#     if "model" in state["active_filters"] and state["active_filters"]["model"] == model:
#         clear_iphone_filter(user_id, "model")
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ iPhone –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –º–æ–¥–µ–ª–∏
#         await show_iphone_products(m, show_all=True)
#     else:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
#         set_iphone_filter(user_id, "model", model)
#         state = get_iphone_filter_state(user_id)
#         await show_iphone_products_with_filters(m, state["active_filters"])

# @dp.message(F.text.regexp(r"^üíæ (\d+GB)$"))
# async def on_iphone_memory_toggle(m: Message):
#     """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–∞–º—è—Ç–∏ iPhone"""
#     user_id = m.from_user.id if m.from_user else 0
#     memory = m.text.replace("üíæ ", "").strip()
#     state = get_iphone_filter_state(user_id)
    
#     # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä - —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
#     if "memory" in state["active_filters"] and state["active_filters"]["memory"] == memory:
#         clear_iphone_filter(user_id, "memory")
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ iPhone –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–∞–º—è—Ç–∏
#         await show_iphone_products(m, show_all=True)
#     else:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
#         set_iphone_filter(user_id, "memory", memory)
#         state = get_iphone_filter_state(user_id)
#         await show_iphone_products_with_filters(m, state["active_filters"])

# @dp.message(F.text.regexp(r"^üåç (.+)$"))
# async def on_iphone_country_toggle(m: Message):
#     """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω—ã iPhone"""
#     user_id = m.from_user.id if m.from_user else 0
#     country = m.text.replace("üåç ", "").strip()
#     state = get_iphone_filter_state(user_id)
    
#     # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä - —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
#     if "country" in state["active_filters"] and state["active_filters"]["country"] == country:
#         clear_iphone_filter(user_id, "country")
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ iPhone –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
#         await show_iphone_products(m, show_all=True)
#     else:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
#         set_iphone_filter(user_id, "country", country)
#         state = get_iphone_filter_state(user_id)
#         await show_iphone_products_with_filters(m, state["active_filters"])

# @dp.message(F.text.regexp(r"^üé® (.+)$"))
# async def on_iphone_color_toggle(m: Message):
#     """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–≤–µ—Ç–∞ iPhone"""
#     user_id = m.from_user.id if m.from_user else 0
#     color = m.text.replace("üé® ", "").strip()
#     state = get_iphone_filter_state(user_id)
    
#     # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä - —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
#     if "color" in state["active_filters"] and state["active_filters"]["color"] == color:
#         clear_iphone_filter(user_id, "color")
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ iPhone –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–≤–µ—Ç–∞
#         await show_iphone_products(m, show_all=True)
#     else:
#         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
#         set_iphone_filter(user_id, "color", color)
#         state = get_iphone_filter_state(user_id)
#         await show_iphone_products_with_filters(m, state["active_filters"])

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
# @dp.message(F.text == BTN_FILTER_CLEAR)
# async def on_clear_filters(m: Message):
#     """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
#     user_id = m.from_user.id if m.from_user else 0
#     clear_iphone_filter(user_id)
    
#     text = "üóëÔ∏è <b>–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
#     text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
    
#     await m.answer(text, parse_mode="HTML", reply_markup=filter_menu_kb(user_id))


# @dp.message(F.text == BTN_FILTER_BACK_TO_MENU)
# async def on_back_to_main_menu(m: Message):
#     """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
#     user_id = m.from_user.id if m.from_user else 0
#     clear_iphone_filter(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    
#     await m.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
#                    parse_mode="HTML", 
#                    reply_markup=await main_menu_kb(user_id, m.chat.type))

# async def show_iphone_products_with_filters(m: Message, filters: Dict[str, str]):
#     """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã iPhone —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
#     if not CHANNEL_ID_OPT:
#         await m.answer("‚ùå –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
#         return
    
#     try:
#         async with Session() as s:
#             # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç iPhone
#             iphone_post = (await s.execute(
#                 select(MonitoredPost)
#                 .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
#                 .where(MonitoredPost.is_active == True)
#                 .where(MonitoredPost.category.ilike('%üçè iPhone%'))
#             )).scalar_one_or_none()
            
#             if not iphone_post:
#                 await m.answer("‚ùå –ü–æ—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏ iPhone –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#                 return
            
#             # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è iPhone —Ç–æ–≤–∞—Ä–æ–≤
#             query = select(Product).where(
#                 and_(
#                     Product.channel_id == CHANNEL_ID_OPT,
#                     Product.group_message_id == iphone_post.message_id,
#                     Product.available == True,
#                     Product.price_wholesale != None
#                 )
#             )
            
#             # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
#             if "model" in filters:
#                 model_group = filters["model"]
#                 model_groups = get_iphone_model_groups()
#                 if model_group in model_groups:
#                     model_conditions = []
#                     for model in model_groups[model_group]:
#                         model_conditions.append(Product.name.ilike(f"%{model}%"))
#                     if model_conditions:
#                         query = query.where(or_(*model_conditions))
            
#             if "memory" in filters:
#                 memory_group = filters["memory"]
#                 memory_groups = get_iphone_memory_groups()
#                 if memory_group in memory_groups:
#                     memory_conditions = []
#                     for memory in memory_groups[memory_group]:
#                         memory_conditions.append(Product.name.ilike(f"%{memory}%"))
#                     if memory_conditions:
#                         query = query.where(or_(*memory_conditions))
            
#             if "condition" in filters:
#                 condition = filters["condition"]
#                 if condition == "–ù–æ–≤—ã–µ":
#                     query = query.where(Product.is_used == False)
#                 elif condition == "–ë/–£":
#                     query = query.where(Product.is_used == True)
            
#             if "country" in filters:
#                 country_group = filters["country"]
#                 country_groups = get_iphone_country_groups()
#                 if country_group in country_groups:
#                     # –ü–æ–∫–∞ —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ SQL
#                     # —Ç–∞–∫ –∫–∞–∫ —Å–ª–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å JSON –ø–æ–ª—è–º–∏ –≤ SQLAlchemy
#                     pass
            
#             if "color" in filters:
#                 color_group = filters["color"]
#                 color_groups = get_iphone_color_groups()
#                 if color_group in color_groups:
#                     color_conditions = []
#                     for color in color_groups[color_group]:
#                         color_conditions.append(Product.name.ilike(f"%{color}%"))
#                     if color_conditions:
#                         query = query.where(or_(*color_conditions))
            
#             # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ü–µ–Ω–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
#             products = list((await s.execute(query.order_by(Product.price_wholesale.desc()))).scalars())
            
#             # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ Python
#             if "country" in filters:
#                 country_group = filters["country"]
#                 country_groups = get_iphone_country_groups()
#                 if country_group in country_groups:
#                     filtered_products = []
#                     for product in products:
#                         if product.extra_attrs and 'flag' in product.extra_attrs:
#                             product_flag = product.extra_attrs['flag']
#                             if product_flag in country_groups[country_group]:
#                                 filtered_products.append(product)
#                     products = filtered_products
            
#             if not products:
#                 text = "üì± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
#                 text += f"<b>–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {get_iphone_filter_summary(m.from_user.id if m.from_user else 0)}\n\n"
#                 text += "‚ùå –ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
#                 text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã:"
                
#                 await m.answer(text, parse_mode="HTML", reply_markup=filter_menu_kb(m.from_user.id if m.from_user else 0))
#                 return
            
#             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
#             text = f"üì± <b>–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
#             text += f"<b>–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {get_iphone_filter_summary(m.from_user.id if m.from_user else 0)}"
            
#             await m.answer(text, parse_mode="HTML", reply_markup=filter_menu_kb(m.from_user.id if m.from_user else 0))
#             await _create_iphone_buttons(m, products, "")
            
#     except Exception as e:
#         log.error(f"Error filtering iPhone products: {e}")
#         await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.")

# async def show_iphone_products(m: Message, show_all: bool = True, show_used: bool = None):
#     """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã iPhone —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
#     if not CHANNEL_ID_OPT:
#         await m.answer("‚ùå –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
#         return
    
#     # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã iPhone
#     async with Session() as s:
#         iphone_posts = (await s.execute(
#             select(MonitoredPost)
#             .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
#             .where(MonitoredPost.is_active == True)
#             .where(MonitoredPost.category.ilike('%üçè iPhone%'))
#             .order_by(MonitoredPost.message_id)
#         )).scalars().all()
    
#     if not iphone_posts:
#         await m.answer("‚ùå –¢–æ–≤–∞—Ä—ã iPhone –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=filter_menu_kb())
#         return
    
#     # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ message_id –¥–ª—è –ø–æ–∏—Å–∫–∞
#     message_ids = [post.message_id for post in iphone_posts]
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
#     items = []
#     async with Session() as s:
#         if show_all:
#             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã iPhone
#             where_clause = and_(
#                 Product.channel_id == CHANNEL_ID_OPT,
#                 Product.group_message_id.in_(message_ids),
#                 Product.available == True,
#                 Product.price_wholesale != None,
#             )
#         else:
#             # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ is_used
#             where_clause = and_(
#                 Product.channel_id == CHANNEL_ID_OPT,
#                 Product.group_message_id.in_(message_ids),
#                 Product.is_used == show_used,
#                 Product.available == True,
#                 Product.price_wholesale != None,
#             )
        
#         items = list((await s.execute(
#             select(Product).where(where_clause).order_by(Product.price_wholesale.desc())
#         )).scalars())
    
#     if not items:
#         filter_text = "–≤—Å–µ—Ö" if show_all else ("–ë/–£" if show_used else "–Ω–æ–≤—ã—Ö")
#         await m.answer(f"‚ùå –¢–æ–≤–∞—Ä—ã iPhone ({filter_text}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=filter_menu_kb())
#         return
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
#     buttons = []
#     MAX_LENGTH = get_adaptive_button_length(m.from_user.id if m.from_user else None)
    
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª
#     if not items:
#         await m.answer("‚ùå –¢–æ–≤–∞—Ä—ã iPhone –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=filter_menu_kb())
#         return
    
#     for p in items:
#         price = int(p.price_wholesale or 0)
#         flag = ""
#         try:
#             ea = dict(p.extra_attrs or {})
#             flag = (ea.get("flag") or "").strip()
#         except Exception:
#             flag = ""
        
#         name = (p.name or "").strip()
#         # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Ñ–ª–∞–≥–∞ –≤ –Ω–∞—á–∞–ª–µ
#         full_name = name
        
#         # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å —Ñ–ª–∞–≥–æ–º –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏
#         if price > 0:
#             flag_separator = f" {flag} " if flag else " ¬∑ "
#             suffix = f"{flag_separator}{fmt_price(price)} ‚ÇΩ"
#         else:
#             suffix = ""
#         full_text_with_suffix = f"{full_name}{suffix}"
        
#         # –û–±—Ä–µ–∑–∫–∞ –∫–∞–∫ –≤ cb_category
#         if len(full_text_with_suffix) > MAX_LENGTH:
#             suffix_len = len(suffix)
#             available_name_length = MAX_LENGTH - suffix_len - 3
            
#             if available_name_length < 3:
#                 if suffix_len <= MAX_LENGTH - 3:
#                     title = "..." + suffix
#                 else:
#                     title = suffix[:MAX_LENGTH-3] + "..."
#             else:
#                 if len(full_name) <= available_name_length:
#                     short_name = full_name
#                 else:
#                     short_name = full_name[:available_name_length] + "..."
#                 title = f"{short_name}{suffix}"
#         else:
#             title = full_text_with_suffix
            
#         buttons.append((title, f"p|{p.id}|{p.group_message_id}|{1 if p.is_used else 0}|1"))
    
#     grid = adaptive_kb(buttons, max_per_row=2, max_row_chars=MAX_LENGTH)
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"
#     back_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters")]
#     kb = merge_kb(grid, [back_row])
    
#     filter_text = "–≤—Å–µ—Ö" if show_all else ("–ë/–£" if show_used else "–Ω–æ–≤—ã—Ö")
#     caption = f"üì± <b>iPhone ({filter_text})</b>\n\n–¢–æ–≤–∞—Ä–æ–≤: {len(items)}"
    
#     await m.answer(caption, reply_markup=kb, parse_mode="HTML")

# async def show_iphone_products_by_model(m: Message, model: str):
#     """–ü–æ–∫–∞–∑–∞—Ç—å iPhone –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
#     if not CHANNEL_ID_OPT:
#         await m.answer("‚ùå –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
#         return
    
#     # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã iPhone –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –ø–æ keyword –≤ monitored_posts, –ª–∏–±–æ fallback –ø–æ Product.category
#     async with Session() as s:
#         iphone_posts = (await s.execute(
#             select(MonitoredPost)
#             .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
#             .where(MonitoredPost.is_active == True)
#             .where(or_(
#                 MonitoredPost.category.ilike('%iPhone%'),
#                 MonitoredPost.category.ilike('%–∞–π—Ñ–æ–Ω%')
#             ))
#             .order_by(MonitoredPost.message_id)
#         )).scalars().all()
    
#     if not iphone_posts:
#         await m.answer("‚ùå –¢–æ–≤–∞—Ä—ã iPhone –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=iphone_models_kb())
#         return
    
#     message_ids = [post.message_id for post in iphone_posts]
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –º–æ–¥–µ–ª–∏ (–ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é —Ü–∏—Ñ—Ä—ã –º–æ–¥–µ–ª–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ Pro/Max/Plus)
#     items = []
#     async with Session() as s:
#         where_clause = and_(
#             Product.channel_id == CHANNEL_ID_OPT,
#             Product.group_message_id.in_(message_ids),
#             Product.available == True,
#             Product.price_wholesale != None,
#             or_(
#                 Product.name.ilike(f'%{model}%'),
#                 Product.category.ilike(f'%{model}%')
#             )
#         )
        
#         items = list((await s.execute(
#             select(Product).where(where_clause).order_by(Product.price_wholesale.desc())
#         )).scalars())
    
#     if not items:
#         await m.answer(f"‚ùå iPhone {model} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=iphone_models_kb())
#         return
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
#     await _create_iphone_buttons(m, items, f"iPhone {model}")

# async def show_iphone_products_by_memory(m: Message, memory: str):
#     """–ü–æ–∫–∞–∑–∞—Ç—å iPhone —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º –ø–∞–º—è—Ç–∏"""
#     if not CHANNEL_ID_OPT:
#         await m.answer("‚ùå –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
#         return
    
#     # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã iPhone –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     async with Session() as s:
#         iphone_posts = (await s.execute(
#             select(MonitoredPost)
#             .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
#             .where(MonitoredPost.is_active == True)
#             .where(or_(
#                 MonitoredPost.category.ilike('%iPhone%'),
#                 MonitoredPost.category.ilike('%–∞–π—Ñ–æ–Ω%')
#             ))
#             .order_by(MonitoredPost.message_id)
#         )).scalars().all()
    
#     if not iphone_posts:
#         await m.answer("‚ùå –¢–æ–≤–∞—Ä—ã iPhone –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=iphone_memory_kb())
#         return
    
#     message_ids = [post.message_id for post in iphone_posts]
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–∞–º—è—Ç–∏ (–ø–æ token –≤ name –ª–∏–±–æ –≤ category)
#     items = []
#     async with Session() as s:
#         where_clause = and_(
#             Product.channel_id == CHANNEL_ID_OPT,
#             Product.group_message_id.in_(message_ids),
#             Product.available == True,
#             Product.price_wholesale != None,
#             or_(
#                 Product.name.ilike(f'%{memory}%'),
#                 Product.category.ilike(f'%{memory}%')
#             )
#         )
        
#         items = list((await s.execute(
#             select(Product).where(where_clause).order_by(Product.price_wholesale.desc())
#         )).scalars())
    
#     if not items:
#         await m.answer(f"‚ùå iPhone —Å –ø–∞–º—è—Ç—å—é {memory} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=iphone_memory_kb())
#         return
    
#     # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
#     await _create_iphone_buttons(m, items, f"iPhone {memory}")

# async def _create_iphone_buttons(m: Message, items: List[Product], title: str, page: int = 0, per_page: int = 24):
#     """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ iPhone —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
#     buttons = []
#     MAX_LENGTH = get_adaptive_button_length(m.from_user.id if m.from_user else None)
    
#     # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
#     start_idx = page * per_page
#     end_idx = start_idx + per_page
#     page_items = items[start_idx:end_idx]
#     total_pages = (len(items) + per_page - 1) // per_page
    
#     for p in page_items:
#         price = int(p.price_wholesale or 0)
#         flag = ""
#         try:
#             ea = dict(p.extra_attrs or {})
#             flag = (ea.get("flag") or "").strip()
#         except Exception:
#             flag = ""
        
#         name = (p.name or "").strip()
#         # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Ñ–ª–∞–≥–∞ –≤ –Ω–∞—á–∞–ª–µ
#         full_name = name
        
#         # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Å —Ñ–ª–∞–≥–æ–º –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏
#         if price > 0:
#             flag_separator = f" {flag} " if flag else " ¬∑ "
#             suffix = f"{flag_separator}{fmt_price(price)} ‚ÇΩ"
#         else:
#             suffix = ""
#         full_text_with_suffix = f"{full_name}{suffix}"
        
#         # –û–±—Ä–µ–∑–∫–∞ –∫–∞–∫ –≤ cb_category
#         if len(full_text_with_suffix) > MAX_LENGTH:
#             suffix_len = len(suffix)
#             available_name_length = MAX_LENGTH - suffix_len - 3
            
#             if available_name_length < 3:
#                 if suffix_len <= MAX_LENGTH - 3:
#                     title_text = "..." + suffix
#                 else:
#                     title_text = suffix[:MAX_LENGTH-3] + "..."
#             else:
#                 if len(full_name) <= available_name_length:
#                     short_name = full_name
#                 else:
#                     short_name = full_name[:available_name_length] + "..."
#                 title_text = f"{short_name}{suffix}"
#         else:
#             title_text = full_text_with_suffix
            
#         buttons.append((title_text, f"p|{p.id}|{p.group_message_id}|{1 if p.is_used else 0}|1"))
    
#     grid = adaptive_kb(buttons, max_per_row=2, max_row_chars=MAX_LENGTH)
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
#     if total_pages > 1:
#         pagination = paginate_bar(page, total_pages, "iphone_prev", "iphone_info", "iphone_next")
#         grid = merge_kb(grid, pagination)
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º"
#     back_row = [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters")]
#     kb = merge_kb(grid, [back_row])
    
#     caption = f"üì± <b>{title}</b>\n\n–¢–æ–≤–∞—Ä–æ–≤: {len(items)}"
#     await m.answer(caption, reply_markup=kb, parse_mode="HTML")

@dp.message(F.text.in_([BTN_RESCAN, BTN_RESCAN_ADMIN]))
async def on_rescan_button(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await cmd_rescan(m)

@dp.message(F.text.in_([BTN_DIAG, BTN_DIAG_ADMIN]))
@dp.message(Command("diag"))
async def on_diag(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    async with Session() as s:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø—Ç–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        total_products = (await s.execute(
            select(func.count()).select_from(Product).where(Product.channel_id == CHANNEL_ID_OPT)
        )).scalar_one()
        
        available_products = (await s.execute(
            select(func.count()).select_from(Product).where(
                and_(
                    Product.channel_id == CHANNEL_ID_OPT,
                    Product.available == True,
                    Product.price_wholesale != None
                )
            )
        )).scalar_one()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
        total_orders = (await s.execute(
            select(func.count()).select_from(Order).where(Order.order_type == "wholesale")
        )).scalar_one()
        
        today_orders = (await s.execute(
            select(func.count()).select_from(Order).where(
                and_(
                    Order.order_type == "wholesale",
                    Order.created_at >= datetime.now(UTC).replace(hour=0, minute=0, second=0, microsecond=0).replace(tzinfo=None)
                )
            )
        )).scalar_one()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—Ä–∑–∏–Ω–∞–º
        active_carts = (await s.execute(
            select(func.count()).select_from(Cart).where(Cart.items != None)
        )).scalar_one()
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        top_categories = (await s.execute(
            select(
                MonitoredPost.category,
                func.count(Product.id).label('cnt')
            )
            .join(Product, 
                  and_(
                      Product.channel_id == MonitoredPost.channel_id,
                      Product.group_message_id == MonitoredPost.message_id
                  ))
            .where(
                and_(
                    MonitoredPost.channel_id == CHANNEL_ID_OPT,
                    Product.available == True,
                    Product.price_wholesale != None
                )
            )
            .group_by(MonitoredPost.category)
            .order_by(func.count(Product.id).desc())
            .limit(5)
        )).all()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        settings_count = (await s.execute(
            select(func.count()).select_from(BotSetting)
        )).scalar_one()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∞–º
        admins_count = (await s.execute(
            select(func.count()).select_from(BotAdmin).where(BotAdmin.channel_type == "wholesale")
        )).scalar_one()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
        monitored_posts = (await s.execute(
            select(func.count()).select_from(MonitoredPost).where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
        )).scalar_one()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    lines = [
        "üîç <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ü–¢–û–í–û–ì–û –ë–û–¢–ê</b>",
        "",
        "üìä <b>–¢–æ–≤–∞—Ä—ã:</b>",
        f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{total_products}</b>",
        f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å: <b>{available_products}</b>",
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: <b>{(available_products/total_products*100) if total_products > 0 else 0:.1f}%</b>",
        "",
        "üìù <b>–ó–∞–∫–∞–∑—ã:</b>",
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>",
        f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{today_orders}</b>",
        "",
        "üõí <b>–ö–æ—Ä–∑–∏–Ω—ã:</b>",
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω: <b>{active_carts}</b>",
        "",
        "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>",
        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î: <b>{settings_count}</b>",
        f"‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: <b>{admins_count}</b>",
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤: <b>{monitored_posts}</b>",
    ]
    
    if top_categories:
        lines.extend([
            "",
            "üèÜ <b>–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>"
        ])
        for cat, cnt in top_categories:
            cat_name = cat or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            lines.append(f"‚Ä¢ {cat_name}: <b>{cnt}</b> —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    lines.extend([
        "",
        "üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>",
        f"‚Ä¢ –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª: <b>{CHANNEL_ID_STORE}</b>",
        f"‚Ä¢ –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª: <b>{CHANNEL_ID_OPT}</b>",
        f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: <b>{MANAGER_GROUP_ID}</b>",
        f"‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: <b>{len(MANAGER_USER_IDS)}</b>",
    ])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    status_lines = []
    if total_products == 0:
        status_lines.append("‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
    if available_products == 0:
        status_lines.append("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    if monitored_posts == 0:
        status_lines.append("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤")
    if admins_count == 0:
        status_lines.append("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    if status_lines:
        lines.extend([
            "",
            "‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã:</b>"
        ])
        lines.extend([f"‚Ä¢ {status}" for status in status_lines])
    else:
        lines.extend([
            "",
            "‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>"
        ])
    
    await m.answer("\n".join(lines), parse_mode="HTML", reply_markup=await main_menu_kb(m.from_user.id if m.from_user else 0, m.chat.type))

@dp.message(Command("fix_categories"))
async def cmd_fix_categories(m: Message):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ monitored_posts –ø–æ message_id."""
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if not CHANNEL_ID_OPT:
        await m.answer("‚ùó –ù–µ –∑–∞–¥–∞–Ω CHANNEL_ID_OPT")
        return
    await m.answer("üîß –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤‚Ä¶")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    opt_updated = 0
    retail_updated = 0
    result_text = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –æ–ø—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if CHANNEL_ID_OPT:
            async with Session() as s:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ monitored_posts –ø–æ group_message_id
                await s.execute(text(
                """
                UPDATE products AS p
                SET category = mp.category
                FROM monitored_posts AS mp
                WHERE p.channel_id = :cid
                  AND mp.channel_id = :cid
                  AND p.group_message_id = mp.message_id
                  AND COALESCE(p.category, '') IS DISTINCT FROM COALESCE(mp.category, '')
                """
            ), {"cid": CHANNEL_ID_OPT})
                await s.commit()
                
                # –°—á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                opt_updated = (await s.execute(text(
                """
                SELECT COUNT(*) FROM products p
                JOIN monitored_posts mp
                  ON mp.channel_id = p.channel_id AND mp.message_id = p.group_message_id
                WHERE p.channel_id = :cid
                  AND COALESCE(p.category, '') = COALESCE(mp.category, '')
                """
            ), {"cid": CHANNEL_ID_OPT})).scalar() or 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if CHANNEL_ID_STORE:
            async with Session() as s:
                await s.execute(text(
                    """
                    UPDATE products AS p
                    SET category = mp.category
                    FROM monitored_posts AS mp
                    WHERE p.channel_id = :cid
                      AND mp.channel_id = :cid
                      AND p.group_message_id = mp.message_id
                      AND COALESCE(p.category, '') IS DISTINCT FROM COALESCE(mp.category, '')
                    """
                ), {"cid": CHANNEL_ID_STORE})
                await s.commit()
                
                retail_updated = (await s.execute(text(
                    """
                    SELECT COUNT(*) FROM products p
                    JOIN monitored_posts mp
                      ON mp.channel_id = p.channel_id AND mp.message_id = p.group_message_id
                    WHERE p.channel_id = :cid
                      AND COALESCE(p.category, '') = COALESCE(mp.category, '')
                    """
                ), {"cid": CHANNEL_ID_STORE})).scalar() or 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = "‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
        result_text += f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
        result_text += f"‚Ä¢ üè¢ –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª: {opt_updated} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n"
        result_text += f"‚Ä¢ üè™ –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª: {retail_updated} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n"
        result_text += f"‚Ä¢ üìà –í—Å–µ–≥–æ: {opt_updated + retail_updated} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        result_text += "üí° <i>–¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ monitored_posts</i>"
        
        await m.answer(result_text, parse_mode="HTML")
        
    except Exception as e:
        log.error(f"Error in fix_categories: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return

@dp.message(Command("set_post_category"))
async def cmd_set_post_category(m: Message):
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –≤—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_post_category <message_id> <category> [opt|store]
    """
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (m.text or "").split(None, 3)
    if len(parts) < 3:
        await m.answer("–§–æ—Ä–º–∞—Ç: /set_post_category <message_id> <category> [opt|store]")
        return
    
    try:
        mid = int(parts[1])
    except Exception:
        await m.answer("message_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    new_cat = parts[2].strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é opt –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    channel_type = parts[3] if len(parts) > 3 else "opt"
    channel_id = CHANNEL_ID_OPT if channel_type == "opt" else CHANNEL_ID_STORE
    channel_name = "–æ–ø—Ç–æ–≤–æ–º" if channel_type == "opt" else "—Ä–æ–∑–Ω–∏—á–Ω–æ–º"
    
    if not channel_id:
        await m.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel_type} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        async with Session() as s:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç
            existing = (await s.execute(
                select(MonitoredPost)
                .where(MonitoredPost.channel_id == channel_id)
                .where(MonitoredPost.message_id == mid)
            )).scalar_one_or_none()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
                existing.category = new_cat
                await s.commit()
                await m.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—Ç–∞ {mid} –≤ {channel_name} –∫–∞–Ω–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_cat}\nüí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ /rescan –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                new_post = MonitoredPost(
                    channel_id=channel_id,
                    message_id=mid,
                    category=new_cat,
                    is_active=True
                )
                s.add(new_post)
                await s.commit()
                await m.answer(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç {mid} –≤ {channel_name} –∫–∞–Ω–∞–ª–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {new_cat}\nüí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ /rescan –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.")
                
    except Exception as e:
        log.error(f"Error setting post category: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("set_category_posts"))
async def cmd_set_category_posts(m: Message):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    –§–æ—Ä–º–∞—Ç: /set_category_posts "üçè iPad" 9,10 [opt|store]
    """
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    text = (m.text or "").strip()
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã:
    # /set_category_posts "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" 9,10,11 [opt|store]
    # /set_category_posts "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ –ø—Ä–æ–±–µ–ª–∞–º–∏" 7, 8
    # /set_category_posts –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1,2,3
    mobj = re.match(r"^/set_category_posts\s+\"(?P<cat>.+?)\"\s+(?P<ids>[\d\s,]+)(?:\s+(?P<chan>opt|store))?\s*$", text)
    if not mobj:
        # –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        mobj = re.match(r"^/set_category_posts\s+(?P<cat>[^\"]\S(?:.*?\S)?)\s+(?P<ids>[\d\s,]+)(?:\s+(?P<chan>opt|store))?\s*$", text)
    if not mobj:
        await m.answer("–§–æ—Ä–º–∞—Ç: /set_category_posts \"–ö–∞—Ç–µ–≥–æ—Ä–∏—è\" 9,10,11 [opt|store]")
        return
    category = (mobj.group("cat") or "").strip()
    ids_raw = (mobj.group("ids") or "")
    try:
        message_ids = [int(x.strip()) for x in ids_raw.split(",") if x.strip()]
    except Exception:
        await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –ø–æ—Å—Ç–æ–≤")
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é opt –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    channel_type = (mobj.group("chan") or "opt").strip()
    channel_id = CHANNEL_ID_OPT if channel_type == "opt" else CHANNEL_ID_STORE
    channel_name = "–æ–ø—Ç–æ–≤–æ–º" if channel_type == "opt" else "—Ä–æ–∑–Ω–∏—á–Ω–æ–º"
    
    if not channel_id:
        await m.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel_type} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        async with Session() as s:
            updated_count = 0
            created_count = 0
            
            for mid in message_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç
                existing = (await s.execute(
                    select(MonitoredPost)
                    .where(MonitoredPost.channel_id == channel_id)
                    .where(MonitoredPost.message_id == mid)
                )).scalar_one_or_none()
                
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
                    existing.category = category
                    updated_count += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                    new_post = MonitoredPost(
                        channel_id=channel_id,
                        message_id=mid,
                        category=category,
                        is_active=True
                    )
                    s.add(new_post)
                    created_count += 1
            
            await s.commit()
            
            result_msg = f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ {channel_name} –∫–∞–Ω–∞–ª–µ:\n"
            if updated_count > 0:
                result_msg += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –ø–æ—Å—Ç–æ–≤\n"
            if created_count > 0:
                result_msg += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {created_count} –ø–æ—Å—Ç–æ–≤\n"
            result_msg += f"‚Ä¢ ID –ø–æ—Å—Ç–æ–≤: {message_ids}\n\n"
            result_msg += "üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ /rescan –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
            
            await m.answer(result_msg)
            
    except Exception as e:
        log.error(f"Error setting category posts: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("create_monitored_post"))
async def cmd_create_monitored_post(m: Message):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –§–æ—Ä–º–∞—Ç: /create_monitored_post 123 "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" [opt|store]
    """
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (m.text or "").split(None, 3)
    if len(parts) < 3:
        await m.answer("–§–æ—Ä–º–∞—Ç: /create_monitored_post <message_id> \"–ö–∞—Ç–µ–≥–æ—Ä–∏—è\" [opt|store]")
        return
    
    try:
        mid = int(parts[1])
    except Exception:
        await m.answer("message_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    category = parts[2].strip('"')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é opt –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    channel_type = parts[3] if len(parts) > 3 else "opt"
    channel_id = CHANNEL_ID_OPT if channel_type == "opt" else CHANNEL_ID_STORE
    channel_name = "–æ–ø—Ç–æ–≤–æ–º" if channel_type == "opt" else "—Ä–æ–∑–Ω–∏—á–Ω–æ–º"
    
    if not channel_id:
        await m.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel_type} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        async with Session() as s:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Å—Ç
            existing = (await s.execute(
                select(MonitoredPost)
                .where(MonitoredPost.channel_id == channel_id)
                .where(MonitoredPost.message_id == mid)
            )).scalar_one_or_none()
            
            if existing:
                await m.answer(f"‚ö†Ô∏è –ü–æ—Å—Ç {mid} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {channel_name} –∫–∞–Ω–∞–ª–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {existing.category}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
            new_post = MonitoredPost(
                channel_id=channel_id,
                message_id=mid,
                category=category,
                is_active=True
            )
            s.add(new_post)
            await s.commit()
            
            await m.answer(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç {mid} –≤ {channel_name} –∫–∞–Ω–∞–ª–µ:\n"
                          f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                          f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                          f"üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ /rescan –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
            
    except Exception as e:
        log.error(f"Error creating monitored post: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("list_monitored_posts"))
async def cmd_list_monitored_posts(m: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –§–æ—Ä–º–∞—Ç: /list_monitored_posts [opt|store]
    """
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (m.text or "").split(None, 1)
    channel_type = parts[1] if len(parts) > 1 else "all"
    
    try:
        async with Session() as s:
            query = select(MonitoredPost).where(MonitoredPost.is_active == True)
            
            if channel_type == "opt":
                query = query.where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
                channel_name = "–û–ø—Ç–æ–≤—ã–π"
            elif channel_type == "store":
                query = query.where(MonitoredPost.channel_id == CHANNEL_ID_STORE)
                channel_name = "–†–æ–∑–Ω–∏—á–Ω—ã–π"
            else:
                channel_name = "–í—Å–µ"
            
            posts = (await s.execute(query.order_by(MonitoredPost.channel_id, MonitoredPost.message_id))).scalars().all()
            
            if not posts:
                await m.answer(f"üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {channel_name.lower()} –∫–∞–Ω–∞–ª–∞")
                return
            
            text = f"üìù <b>–ü–æ—Å—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({channel_name} –∫–∞–Ω–∞–ª)</b>\n\n"
            
            current_channel = None
            for post in posts:
                if current_channel != post.channel_id:
                    current_channel = post.channel_id
                    channel_display = "üè¢ –û–ø—Ç–æ–≤—ã–π" if post.channel_id == CHANNEL_ID_OPT else "üè™ –†–æ–∑–Ω–∏—á–Ω—ã–π"
                    text += f"\n<b>{channel_display} –∫–∞–Ω–∞–ª:</b>\n"
                
                category = post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                text += f"‚Ä¢ –ü–æ—Å—Ç {post.message_id}: {category}\n"
            
            text += f"\nüìä <b>–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:</b> {len(posts)}"
            
            await m.answer(text, parse_mode="HTML")
            
    except Exception as e:
        log.error(f"Error listing monitored posts: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("sync_monitoring"))
async def cmd_sync_monitoring(m: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –§–æ—Ä–º–∞—Ç: /sync_monitoring [opt|store]
    """
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (m.text or "").split(None, 1)
    channel_type = parts[1] if len(parts) > 1 else "all"
    
    try:
        await m.answer("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        text = "üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        
        if channel_type in ["opt", "all"]:
            opt_ids = await get_monitored_message_ids("opt")
            text += f"<b>üè¢ –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª ({len(opt_ids)} –ø–æ—Å—Ç–æ–≤):</b>\n"
            text += f"‚Ä¢ –ü–æ—Å—Ç—ã: {', '.join(map(str, sorted(opt_ids))) if opt_ids else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        
        if channel_type in ["store", "all"]:
            store_ids = await get_monitored_message_ids("store")
            text += f"<b>üè™ –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª ({len(store_ids)} –ø–æ—Å—Ç–æ–≤):</b>\n"
            text += f"‚Ä¢ –ü–æ—Å—Ç—ã: {', '.join(map(str, sorted(store_ids))) if store_ids else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        
        text += "üí° <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –ë–î</i>"
        
        await m.answer(text, parse_mode="HTML")
        
    except Exception as e:
        log.error(f"Error checking monitoring: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

@dp.message(Command("compare_monitoring"))
async def cmd_compare_monitoring(m: Message):
    """
    –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –ë–î
    –§–æ—Ä–º–∞—Ç: /compare_monitoring [opt|store]
    """
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (m.text or "").split(None, 1)
    channel_type = parts[1] if len(parts) > 1 else "all"
    
    try:
        async with Session() as s:
            text = "üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ë–î</b>\n\n"
            
            if channel_type in ["opt", "all"]:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                if CHANNEL_ID_OPT:
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ bot_settings
                    settings_ids = await get_monitored_message_ids("opt")
                    
                    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    db_posts = (await s.execute(
                        select(MonitoredPost)
                        .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
                        .where(MonitoredPost.is_active == True)
                    )).scalars().all()
                    db_ids = {post.message_id for post in db_posts}
                    
                    text += f"üè¢ <b>–û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª:</b>\n"
                    text += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {sorted(settings_ids) if settings_ids else '–ü—É—Å—Ç–æ'}\n"
                    text += f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {sorted(db_ids) if db_ids else '–ü—É—Å—Ç–æ'}\n"
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
                    only_in_settings = settings_ids - db_ids
                    only_in_db = db_ids - settings_ids
                    common = settings_ids & db_ids
                    
                    text += f"‚Ä¢ –û–±—â–∏–µ: {len(common)} –ø–æ—Å—Ç–æ–≤\n"
                    if only_in_settings:
                        text += f"‚Ä¢ –¢–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {sorted(only_in_settings)}\n"
                    if only_in_db:
                        text += f"‚Ä¢ –¢–æ–ª—å–∫–æ –≤ –ë–î: {sorted(only_in_db)}\n"
                    text += "\n"
            
            if channel_type in ["store", "all"]:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
                if CHANNEL_ID_STORE:
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ bot_settings
                    settings_ids = await get_monitored_message_ids("store")
                    
                    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    db_posts = (await s.execute(
                        select(MonitoredPost)
                        .where(MonitoredPost.channel_id == CHANNEL_ID_STORE)
                        .where(MonitoredPost.is_active == True)
                    )).scalars().all()
                    db_ids = {post.message_id for post in db_posts}
                    
                    text += f"üè™ <b>–†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª:</b>\n"
                    text += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {sorted(settings_ids) if settings_ids else '–ü—É—Å—Ç–æ'}\n"
                    text += f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {sorted(db_ids) if db_ids else '–ü—É—Å—Ç–æ'}\n"
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
                    only_in_settings = settings_ids - db_ids
                    only_in_db = db_ids - settings_ids
                    common = settings_ids & db_ids
                    
                    text += f"‚Ä¢ –û–±—â–∏–µ: {len(common)} –ø–æ—Å—Ç–æ–≤\n"
                    if only_in_settings:
                        text += f"‚Ä¢ –¢–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {sorted(only_in_settings)}\n"
                    if only_in_db:
                        text += f"‚Ä¢ –¢–æ–ª—å–∫–æ –≤ –ë–î: {sorted(only_in_db)}\n"
                    text += "\n"
            
            text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sync_monitoring –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</i>"
            
            await m.answer(text, parse_mode="HTML")
            
    except Exception as e:
        log.error(f"Error comparing monitoring: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")

@dp.message(Command("sync_monitoring_to_db"))
async def cmd_sync_monitoring_to_db(m: Message):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ë–î - —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ MonitoredPost –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    –§–æ—Ä–º–∞—Ç: /sync_monitoring_to_db [opt|store]
    """
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (m.text or "").split(None, 1)
    channel_type = parts[1] if len(parts) > 1 else "all"
    
    try:
        await m.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ë–î...")
        
        created_count = 0
        
        async with Session() as s:
            if channel_type in ["opt", "all"]:
                # –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                opt_ids = await get_monitored_message_ids("opt")
                if opt_ids:
                    for message_id in opt_ids:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
                        existing = (await s.execute(
                            select(MonitoredPost)
                            .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
                            .where(MonitoredPost.message_id == message_id)
                        )).scalar_one_or_none()
                        
                        if not existing:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                            new_post = MonitoredPost(
                                channel_id=CHANNEL_ID_OPT,
                                message_id=message_id,
                                category="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                is_active=True
                            )
                            s.add(new_post)
                            created_count += 1
            
            if channel_type in ["store", "all"]:
                # –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
                store_ids = await get_monitored_message_ids("store")
                if store_ids:
                    for message_id in store_ids:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
                        existing = (await s.execute(
                            select(MonitoredPost)
                            .where(MonitoredPost.channel_id == CHANNEL_ID_STORE)
                            .where(MonitoredPost.message_id == message_id)
                        )).scalar_one_or_none()
                        
                        if not existing:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                            new_post = MonitoredPost(
                                channel_id=CHANNEL_ID_STORE,
                                message_id=message_id,
                                category="–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                is_active=True
                            )
                            s.add(new_post)
                            created_count += 1
            
            await s.commit()
        
        await m.answer(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                      f"üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {created_count}\n"
                      f"üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
    except Exception as e:
        log.error(f"Error syncing monitoring to DB: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–¥–º–∏–Ω): inline-UI + –∫–æ–º–∞–Ω–¥—ã ---
BTN_SETTINGS_CONTACTS = "‚úèÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã"
BTN_SETTINGS_TEMPLATES = "üß© –®–∞–±–ª–æ–Ω—ã"
BTN_SETTINGS_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

def settings_root_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BTN_SETTINGS_CONTACTS, callback_data="settings:contacts")],
        [InlineKeyboardButton(text=BTN_SETTINGS_TEMPLATES, callback_data="settings:tpls")],
        [InlineKeyboardButton(text="üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤", callback_data="settings:monitoring")],
        [InlineKeyboardButton(text="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="settings:categories")],
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="settings:admins")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="settings:back_to_menu")],
    ])

def templates_list_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (1 —Ç–æ–≤–∞—Ä)", callback_data="settings:tpl:order_received")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω", callback_data="settings:tpl:order_approved")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω", callback_data="settings:tpl:order_rejected")],
        [InlineKeyboardButton(text="üß∫ –ò—Ç–æ–≥–∏ –∫–æ—Ä–∑–∏–Ω—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ)", callback_data="settings:tpl:cart_checkout_summary")],
        [InlineKeyboardButton(text="üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º", callback_data="settings:tpl:admin_order_notification")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data="settings:back")],
    ])

@dp.message(F.text.in_([BTN_SETTINGS, BTN_SETTINGS_ADMIN]))
@dp.message(Command("settings"))
async def on_settings(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await m.answer("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", parse_mode="HTML", reply_markup=settings_root_kb())

@dp.callback_query(F.data == "settings:back")
async def settings_back(c: CallbackQuery):
    try:
        await c.message.edit_text("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", parse_mode="HTML", reply_markup=settings_root_kb())
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=settings_root_kb())
    await c.answer()

@dp.callback_query(F.data == "settings:back_to_menu")
async def settings_back_to_menu(c: CallbackQuery):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await c.message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="HTML", reply_markup=await main_menu_kb(c.from_user.id if c.from_user else 0, c.message.chat.type))
    except Exception as e:
        log.error(f"Error sending main menu: {e}")
    await c.answer()

@dp.callback_query(F.data == "settings:contacts")
async def settings_contacts(c: CallbackQuery):
    text = await get_contacts_text()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="settings:contacts:edit")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data="settings:back")],
    ])
    try:
        await c.message.edit_text(f"–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n{text}", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

PENDING_TEMPLATE_EDIT = {}  # type: Dict[int, str]  # admin_id -> template_name
PENDING_CONTACTS_EDIT = {}  # type: Dict[int, bool]  # admin_id -> waiting flag
PENDING_ADMIN_ADD = {}  # type: Dict[int, bool]
PENDING_ADMIN_REMOVE = {}  # type: Dict[int, bool]
PENDING_CATEGORY_EDIT = {}  # type: Dict[int, dict]

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
LAST_MAIN_MENU_MESSAGE = {}  # user_id -> message_id

async def update_main_menu_for_user(user_id: int, bot: Bot):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        message = await bot.send_message(
            chat_id=user_id,
            text="üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=await main_menu_kb(user_id, m.chat.type)
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        LAST_MAIN_MENU_MESSAGE[user_id] = message.message_id
    except Exception as e:
        log.error(f"Error updating main menu for user {user_id}: {e}")

@dp.callback_query(F.data == "settings:contacts:edit")
async def settings_contacts_edit(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    PENDING_CONTACTS_EDIT[c.from_user.id] = True
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings:cancel_contacts")]
    ])
    await c.message.reply(
        "‚úèÔ∏è <b>–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ <b>—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n\n"
        "üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>",
        parse_mode="HTML",
        reply_markup=kb
    )
    await c.answer("–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω")

@dp.callback_query(F.data == "settings:tpls")
async def settings_templates(c: CallbackQuery):
    try:
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=templates_list_kb())
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=templates_list_kb())
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:tpl:(.+)$"))
async def settings_template_open(c: CallbackQuery):
    name = c.data.split(":")[2]
    tpl = await get_template(name)
    
    # –û–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    descriptions = {
        "order_received": (
            "üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä)</b>\n\n"
            "üéØ <b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:</b> –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n"
            "üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ, —Ü–µ–Ω–µ –∏ –æ–±—â–µ–π —Å—É–º–º–µ\n"
            "üí¨ <b>–¢–æ–Ω:</b> –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, —Å –æ–±–µ—â–∞–Ω–∏–µ–º —Å–≤—è–∑–∏\n"
            "üé® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏, —á–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞\n"
            "üîÑ <b>–û—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ—Ä–∑–∏–Ω—ã:</b> –î–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –Ω–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö"
        ),
        "order_approved": (
            "‚úÖ <b>–ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω</b>\n\n"
            "üéØ <b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:</b> –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
            "üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n"
            "üí¨ <b>–¢–æ–Ω:</b> –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π, —Ä–∞–¥–æ—Å—Ç–Ω—ã–π, —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é\n"
            "üé® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> –ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —ç–º–æ–¥–∑–∏"
        ),
        "order_rejected": (
            "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            "üéØ <b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:</b> –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
            "üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b> –í–µ–∂–ª–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã\n"
            "üí¨ <b>–¢–æ–Ω:</b> –í–µ–∂–ª–∏–≤—ã–π, —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π, —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤\n"
            "üé® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> –¢–∞–∫—Ç–∏—á–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∑–∞–∫–∞–∑—É"
        ),
        "cart_checkout_summary": (
            "üß∫ <b>–ò—Ç–æ–≥–∏ –∫–æ—Ä–∑–∏–Ω—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤)</b>\n\n"
            "üéØ <b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:</b> –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏\n"
            "üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b> –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π, –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É\n"
            "üí¨ <b>–¢–æ–Ω:</b> –ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π, –æ–±–Ω–∞–¥–µ–∂–∏–≤–∞—é—â–∏–π, —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Å–≤—è–∑–∏\n"
            "üé® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "üîÑ <b>–û—Ç–ª–∏—á–∏–µ –æ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:</b> –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
        ),
        "admin_order_notification": (
            "üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</b>\n\n"
            "üéØ <b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:</b> –ü—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ (—Ä–æ–∑–Ω–∏—á–Ω–æ–º –∏–ª–∏ –æ–ø—Ç–æ–≤–æ–º)\n"
            "üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ, —Ç–æ–≤–∞—Ä–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ, —Ü–µ–Ω–µ\n"
            "üí¨ <b>–¢–æ–Ω:</b> –î–µ–ª–æ–≤–æ–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é\n"
            "üé® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b> –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤ –∏ –ª–∏—á–Ω–æ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É\n"
            "üîÑ <b>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> –†–æ–∑–Ω–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã ‚Üí —Ä–æ–∑–Ω–∏—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã, –æ–ø—Ç–æ–≤—ã–µ ‚Üí –æ–ø—Ç–æ–≤—ã–µ –∞–¥–º–∏–Ω—ã"
        )
    }
    
    description = descriptions.get(name, f"<b>{name}</b>")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —à–∞–±–ª–æ–Ω–∞
    tpl_preview = tpl[:500] + "..." if len(tpl) > 500 else tpl
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"settings:tpl_edit:{name}")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"settings:tpl_full:{name}")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data="settings:tpls")],
    ])
    
    text = f"{description}\n\n<b>–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω:</b>\n<code>{html.quote(tpl_preview)}</code>"
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:tpl_full:(.+)$"))
async def settings_template_full(c: CallbackQuery):
    name = c.data.split(":")[2]
    tpl = await get_template(name)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"settings:tpl_edit:{name}")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data=f"settings:tpl:{name}")],
    ])
    
    text = f"<b>–ü–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω {name}:</b>\n\n<code>{html.quote(tpl)}</code>"
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:tpl_edit:(.+)$"))
async def settings_template_edit(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    name = c.data.split(":")[2]
    if name not in DEFAULT_TEMPLATES:
        await c.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞.", show_alert=True)
        return
    PENDING_TEMPLATE_EDIT[c.from_user.id] = name
    placeholders_by_tpl = {
        "order_received": "{product_name}, {quantity}, {price_each}, {total}, {contacts}",
        "order_approved": "{product_name}, {quantity}, {price_each}, {total}, {address}, {contacts}",
        "order_rejected": "{product_name}, {quantity}, {contacts}",
        "cart_checkout_summary": "{cart_items}, {items_count}, {total}, {contacts}",
        "admin_order_notification": "{order_id}, {user_id}, {username_info}, {product_name}, {quantity}, {price_each}, {total_price}"
    }
    ph = placeholders_by_tpl.get(name, "{contacts}")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings:cancel_template")]
    ])
    await c.message.reply(
        f"–ü—Ä–∏—à–ª–∏—Ç–µ <b>—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ <code>{name}</code>.\n\n"
        f"üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:</b> {ph}\n\n"
        f"üé® <b>–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞:</b>\n"
        f"‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> ‚Üí <code>&lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;</code>\n"
        f"‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i> ‚Üí <code>&lt;i&gt;—Ç–µ–∫—Å—Ç&lt;/i&gt;</code>\n"
        f"‚Ä¢ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> ‚Üí <code>&lt;u&gt;—Ç–µ–∫—Å—Ç&lt;/u&gt;</code>\n"
        f"‚Ä¢ <s>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s> ‚Üí <code>&lt;s&gt;—Ç–µ–∫—Å—Ç&lt;/s&gt;</code>\n"
        f"‚Ä¢ <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code> ‚Üí <code>&lt;code&gt;—Ç–µ–∫—Å—Ç&lt;/code&gt;</code>",
        parse_mode="HTML",
        reply_markup=kb
    )
    await c.answer()

@dp.callback_query(F.data == "settings:monitoring")
async def settings_monitoring(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    store_ids = await get_monitored_message_ids("store")
    opt_ids = await get_monitored_message_ids("opt")
    store_master = await get_master_message_id("store")
    opt_master = await get_master_message_id("opt")
    
    text = (
        "üì° <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤</b>\n\n"
        f"<b>–†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª:</b>\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –ø–æ—Å—Ç—ã: {', '.join(map(str, sorted(store_ids))) if store_ids else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n"
        f"‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {store_master or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        f"<b>–û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª:</b>\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –ø–æ—Å—Ç—ã: {', '.join(map(str, sorted(opt_ids))) if opt_ids else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n"
        f"‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {opt_master or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè™ –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="settings:monitoring:store")],
        [InlineKeyboardButton(text="üè¢ –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data="settings:monitoring:opt")],
        [InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="settings:monitoring:sync")],
        [InlineKeyboardButton(text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å", callback_data="settings:monitoring:compare")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data="settings:back")],
    ])
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:monitoring:(store|opt)$"))
async def settings_monitoring_channel(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    channel_type = c.data.split(":")[2]
    channel_name = "—Ä–æ–∑–Ω–∏—á–Ω–æ–º" if channel_type == "store" else "–æ–ø—Ç–æ–≤–æ–º"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    message_ids = await get_monitored_message_ids(channel_type)
    master_id = await get_master_message_id(channel_type)
    
    text = (
        f"üì° <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {channel_name} –∫–∞–Ω–∞–ª–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –ø–æ—Å—Ç—ã: {', '.join(map(str, sorted(message_ids))) if message_ids else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n"
        f"‚Ä¢ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {master_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –ø–æ—Å—Ç—ã", callback_data=f"settings:monitoring:{channel_type}:posts")],
        [InlineKeyboardButton(text="üìå –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"settings:monitoring:{channel_type}:master")],
        [InlineKeyboardButton(text="üîó –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ—Å—Ç—ã", callback_data=f"settings:monitoring:{channel_type}:merge")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data="settings:monitoring")],
    ])
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:monitoring:(store|opt):posts$"))
async def settings_monitoring_posts(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    channel_type = c.data.split(":")[2]
    channel_name = "—Ä–æ–∑–Ω–∏—á–Ω–æ–º" if channel_type == "store" else "–æ–ø—Ç–æ–≤–æ–º"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    message_ids = await get_monitored_message_ids(channel_type)
    
    text = (
        f"üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –ø–æ—Å—Ç–æ–≤ ({channel_name} –∫–∞–Ω–∞–ª)</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ ID –ø–æ—Å—Ç–æ–≤:</b>\n"
        f"{', '.join(map(str, sorted(message_ids))) if message_ids else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        f"<b>üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ <code>/set_monitored_{channel_type} 1,2,3</code> - –∑–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫\n"
        f"‚Ä¢ <code>/add_monitored_{channel_type} 4,5</code> - –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º\n"
        f"‚Ä¢ <code>/remove_monitored_{channel_type} 1,2</code> - —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        f"üí° <i>ID –ø–æ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å—Å—ã–ª–∫–∞—Ö –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞</i>"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data=f"settings:monitoring:{channel_type}")],
    ])
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:monitoring:(store|opt):master$"))
async def settings_monitoring_master(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    channel_type = c.data.split(":")[2]
    channel_name = "—Ä–æ–∑–Ω–∏—á–Ω–æ–º" if channel_type == "store" else "–æ–ø—Ç–æ–≤–æ–º"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    master_id = await get_master_message_id(channel_type)
    
    text = (
        f"üìå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ({channel_name} –∫–∞–Ω–∞–ª)</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π ID:</b> {master_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
        f"<b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å:</b>\n"
        f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ\n"
        f"2. –ó–∞–º–µ–Ω–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ –Ω—É–∂–Ω—ã–π ID\n"
        f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É\n\n"
        f"<b>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        f"<code>/set_master_{channel_type} 123</code>\n\n"
        f"üí° <i>ID —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å—Å—ã–ª–∫–µ –Ω–∞ –Ω–µ–≥–æ</i>"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data=f"settings:monitoring:{channel_type}")],
    ])
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:monitoring:(store|opt):merge$"))
async def settings_monitoring_merge(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    channel_type = c.data.split(":")[2]
    channel_name = "—Ä–æ–∑–Ω–∏—á–Ω–æ–º" if channel_type == "store" else "–æ–ø—Ç–æ–≤–æ–º"
    
    text = (
        f"üîó <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ ({channel_name} –∫–∞–Ω–∞–ª)</b>\n\n"
        f"<b>–ß—Ç–æ —ç—Ç–æ:</b> –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–¥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤.\n"
        f"–ü–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä—ã –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤.\n\n"
        f"<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ\n"
        f"2. –ó–∞–º–µ–Ω–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ ID –ø–æ—Å—Ç–æ–≤\n"
        f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É\n\n"
        f"<b>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        f"<code>/set_category_posts \"üçè iPad\" 9,10</code>\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        f"‚Ä¢ <code>/set_category_posts \"üîå –ê–∫—Å—ã Apple\" 12,13,14</code>\n"
        f"‚Ä¢ <code>/set_category_posts \"üì± Samsung\" 6,7</code>\n\n"
        f"üí° <i>–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /rescan –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤</i>"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data=f"settings:monitoring:{channel_type}")],
    ])
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data == "settings:monitoring:sync")
async def settings_monitoring_sync(c: CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ë–î"""
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    try:
        await c.message.edit_text("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ë–î...")
        
        # –¢–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –ë–î
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        opt_ids = await get_monitored_message_ids("opt")
        store_ids = await get_monitored_message_ids("store")
        
        text = (
            "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"<b>–†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª:</b> {len(store_ids)} –ø–æ—Å—Ç–æ–≤\n"
            f"‚Ä¢ –ü–æ—Å—Ç—ã: {', '.join(map(str, sorted(store_ids))) if store_ids else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
            f"<b>–û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª:</b> {len(opt_ids)} –ø–æ—Å—Ç–æ–≤\n"
            f"‚Ä¢ –ü–æ—Å—Ç—ã: {', '.join(map(str, sorted(opt_ids))) if opt_ids else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n"
            "üí° <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –ë–î</i>"
        )
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å", callback_data="settings:monitoring:compare")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:monitoring")],
        ])
        
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
        
    except Exception as e:
        log.error(f"Error syncing monitoring: {e}")
        await c.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", show_alert=True)
    await c.answer()

@dp.callback_query(F.data == "settings:monitoring:compare")
async def settings_monitoring_compare(c: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    try:
        await c.message.edit_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        store_ids = await get_monitored_message_ids("store")
        opt_ids = await get_monitored_message_ids("opt")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞—Ö
        store_posts_info = []
        opt_posts_info = []
        
        async with Session() as s:
            if store_ids:
                store_posts = (await s.execute(
                    select(MonitoredPost)
                    .where(MonitoredPost.channel_id == CHANNEL_ID_STORE)
                    .where(MonitoredPost.message_id.in_(store_ids))
                )).scalars().all()
                store_posts_info = [(post.message_id, post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for post in store_posts]
            
            if opt_ids:
                opt_posts = (await s.execute(
                    select(MonitoredPost)
                    .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
                    .where(MonitoredPost.message_id.in_(opt_ids))
                )).scalars().all()
                opt_posts_info = [(post.message_id, post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for post in opt_posts]
        
        text = "üìä <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        
        text += f"<b>üè™ –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª ({len(store_ids)} –ø–æ—Å—Ç–æ–≤):</b>\n"
        for message_id, category in sorted(store_posts_info):
            text += f"‚Ä¢ –ü–æ—Å—Ç {message_id}: {category}\n"
        text += "\n"
        
        text += f"<b>üè¢ –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª ({len(opt_ids)} –ø–æ—Å—Ç–æ–≤):</b>\n"
        for message_id, category in sorted(opt_posts_info):
            text += f"‚Ä¢ –ü–æ—Å—Ç {message_id}: {category}\n"
        text += "\n"
        
        text += "üí° <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –ë–î</i>"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="settings:monitoring:compare")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:monitoring")],
        ])
        
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
        
    except Exception as e:
        log.error(f"Error comparing monitoring: {e}")
        await c.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}", show_alert=True)
    await c.answer()

# --- –ö–æ–º–∞–Ω–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ---
@dp.message(Command("get_contacts"))
async def on_get_contacts(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await m.answer(await get_contacts_text())

@dp.message(Command("set_contacts"))
async def on_set_contacts(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    txt = (m.text or "").split(None, 1)
    if len(txt) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /set_contacts –¢–ï–ö–°–¢")
        return
    await set_setting("contacts", txt[1].strip())
    await m.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

@dp.message(Command("get_template"))
async def on_get_tpl(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è: /get_template order_received|order_approved|order_rejected|cart_checkout_summary")
        return
    name = parts[1].strip()
    tpl = await get_template(name)
    await m.answer(f"<b>{name}</b>\n\n<code>{html.quote(tpl)}</code>", parse_mode="HTML")

@dp.message(Command("set_template"))
async def on_set_tpl(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è: /set_template order_received|order_approved|order_rejected|cart_checkout_summary")
        return
    name = parts[1].strip()
    if name not in DEFAULT_TEMPLATES:
        await m.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —à–∞–±–ª–æ–Ω–∞.")
        return
    PENDING_TEMPLATE_EDIT[m.from_user.id] = name
    await m.answer(
        f"–û–∫. –ü—Ä–∏—à–ª–∏—Ç–µ <b>—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ <code>{name}</code>.\n\n"
        "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:</b> {product_name}, {quantity}, {price_each}, {total}, {user_id}, {username}, {contacts}\n\n"
        f"üé® <b>–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞:</b>\n"
        f"‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> ‚Üí <code>&lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;</code>\n"
        f"‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i> ‚Üí <code>&lt;i&gt;—Ç–µ–∫—Å—Ç&lt;/i&gt;</code>\n"
        f"‚Ä¢ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> ‚Üí <code>&lt;u&gt;—Ç–µ–∫—Å—Ç&lt;/u&gt;</code>\n"
        f"‚Ä¢ <s>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s> ‚Üí <code>&lt;s&gt;—Ç–µ–∫—Å—Ç&lt;/s&gt;</code>\n"
        f"‚Ä¢ <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code> ‚Üí <code>&lt;code&gt;—Ç–µ–∫—Å—Ç&lt;/code&gt;</code>",
        parse_mode="HTML"
    )

# –ü—Ä–∏–µ–º ¬´—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è¬ª –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤/—à–∞–±–ª–æ–Ω–æ–≤
# –®–∏—Ä–æ–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞

@dp.callback_query(F.data == "settings:categories")
async def settings_categories(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ bot_settings
    store_ids = await get_monitored_message_ids("store")
    opt_ids = await get_monitored_message_ids("opt")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î - —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async with Session() as s:
        # –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª - —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        retail_posts = []
        if store_ids:
            retail_posts = (await s.execute(
                select(MonitoredPost)
                .where(MonitoredPost.channel_id == CHANNEL_ID_STORE)
                .where(MonitoredPost.message_id.in_(store_ids))
                .where(MonitoredPost.is_active == True)
                .order_by(MonitoredPost.message_id)
            )).scalars().all()
        
        # –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª - —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        opt_posts = []
        if opt_ids:
            opt_posts = (await s.execute(
                select(MonitoredPost)
                .where(MonitoredPost.channel_id == CHANNEL_ID_OPT)
                .where(MonitoredPost.message_id.in_(opt_ids))
                .where(MonitoredPost.is_active == True)
                .order_by(MonitoredPost.message_id)
            )).scalars().all()
    
    text = "üè∑Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    text += "<b>üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n\n"
    
    text += f"<b>üè™ –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª ({len(retail_posts)} –ø–æ—Å—Ç–æ–≤):</b>\n"
    for post in retail_posts:
        category = post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        text += f"‚Ä¢ –ü–æ—Å—Ç {post.message_id}: {category}\n"
    
    text += f"\n<b>üè¢ –û–ø—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª ({len(opt_posts)} –ø–æ—Å—Ç–æ–≤):</b>\n"
    for post in opt_posts:
        category = post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        text += f"‚Ä¢ –ü–æ—Å—Ç {post.message_id}: {category}\n"
    
    text += "\n<b>üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    text += "‚Ä¢ <code>/set_post_category &lt;message_id&gt; &lt;–∫–∞—Ç–µ–≥–æ—Ä–∏—è&gt;</code>\n"
    text += "‚Ä¢ <code>/set_category_posts &lt;–∫–∞—Ç–µ–≥–æ—Ä–∏—è&gt; &lt;id1,id2,id3&gt;</code>\n"
    text += "‚Ä¢ <code>/fix_categories</code> - –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å\n\n"
    text += "üí° <i>–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /fix_categories –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤</i>"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å—Ç–æ–≤
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if opt_posts:
        buttons.append([InlineKeyboardButton(text="üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã", callback_data="settings:categories:opt")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞  
    if retail_posts:
        buttons.append([InlineKeyboardButton(text="üè™ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–∑–Ω–∏—á–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="settings:categories:retail")])
    
    buttons.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data="settings:categories")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data="settings:back")],
    ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:categories:(opt|retail)$"))
async def settings_categories_edit(c: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    channel_type = c.data.split(":")[-1]
    channel_id = CHANNEL_ID_OPT if channel_type == "opt" else CHANNEL_ID_STORE
    channel_name = "–û–ø—Ç–æ–≤—ã–π" if channel_type == "opt" else "–†–æ–∑–Ω–∏—á–Ω—ã–π"
    
    if not channel_id:
        await c.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    monitored_ids = await get_monitored_message_ids(channel_type)
    
    if not monitored_ids:
        await c.answer("‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async with Session() as s:
        posts = (await s.execute(
            select(MonitoredPost)
            .where(MonitoredPost.channel_id == channel_id)
            .where(MonitoredPost.message_id.in_(monitored_ids))
            .where(MonitoredPost.is_active == True)
            .order_by(MonitoredPost.message_id)
        )).scalars().all()
    
    if not posts:
        await c.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        return
    
    text = f"üè∑Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - {channel_name} –∫–∞–Ω–∞–ª</b>\n\n"
    text += f"<b>üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:</b> {len(posts)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    buttons = []
    for post in posts:
        category = post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(category) > 35:
            category = category[:32] + "..."
        button_text = f"üìù {post.message_id}: {category}"
        callback_data = f"settings:categories:edit:{channel_type}:{post.message_id}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"settings:categories:{channel_type}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="settings:categories")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data="settings:back")],
    ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await c.answer()
            return
        try:
            await c.message.edit_reply_markup(reply_markup=kb)
        except TelegramBadRequest as e2:
            if "message is not modified" in str(e2):
                await c.answer()
                return
            raise
    await c.answer()

@dp.callback_query(F.data.regexp(r"^settings:categories:edit:(opt|retail):(\d+)$"))
async def settings_categories_edit_post(c: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log.info(f"Callback data: {c.data}")
    
    parts = c.data.split(":")
    log.info(f"Split parts: {parts}")
    
    if len(parts) < 5:
        await c.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    channel_type = parts[3]  # opt –∏–ª–∏ retail
    try:
        message_id = int(parts[4])  # ID –ø–æ—Å—Ç–∞
        log.info(f"Parsed: channel_type={channel_type}, message_id={message_id}")
    except ValueError as e:
        log.error(f"ValueError parsing message_id: {e}")
        await c.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞", show_alert=True)
        return
    channel_id = CHANNEL_ID_OPT if channel_type == "opt" else CHANNEL_ID_STORE
    channel_name = "–û–ø—Ç–æ–≤—ã–π" if channel_type == "opt" else "–†–æ–∑–Ω–∏—á–Ω—ã–π"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
    async with Session() as s:
        post = (await s.execute(
            select(MonitoredPost)
            .where(MonitoredPost.channel_id == channel_id)
            .where(MonitoredPost.message_id == message_id)
        )).scalar_one_or_none()
    
    if not post:
        await c.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    current_category = post.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
    text += f"<b>üìä –ö–∞–Ω–∞–ª:</b> {channel_name}\n"
    text += f"<b>üìù –ü–æ—Å—Ç ID:</b> {message_id}\n"
    text += f"<b>üè∑Ô∏è –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {current_category}\n\n"
    text += "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏</i>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    PENDING_CATEGORY_EDIT[c.from_user.id] = {
        "channel_type": channel_type,
        "message_id": message_id,
        "channel_id": channel_id
    }
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"settings:categories:{channel_type}")],
    ])
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data == "settings:admins")
async def settings_admins(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    admins = await get_all_admins()
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏</b>\n\n"
    text += f"<b>–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤:</b> {len(admins)}\n\n"
    
    if admins:
        text += "<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n"
        for admin in admins:
            username = f"@{admin.username}" if admin.username else "–ë–µ–∑ username"
            full_name = admin.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            text += f"‚Ä¢ {full_name} ({username}) - ID: {admin.user_id}\n"
    else:
        text += "–ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    text += "\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
    text += "‚Ä¢ /add_admin @username - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
    text += "‚Ä¢ /remove_admin @username - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
    text += "‚Ä¢ /list_admins - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="settings:admins:add"), InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="settings:admins:remove")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="settings:admins")],
        [InlineKeyboardButton(text=BTN_SETTINGS_BACK, callback_data="settings:back")],
    ])
    
    try:
        await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest:
        await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data == "settings:admins:add")
async def settings_admins_add(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    PENDING_ADMIN_ADD[c.from_user.id] = True
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings:cancel_admin_add")]
    ])
    try:
        await c.message.reply("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ username –≤–∏–¥–∞ @username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã", reply_markup=kb)
    except Exception:
        pass
    await c.answer()

@dp.callback_query(F.data == "settings:admins:remove")
async def settings_admins_remove(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    PENDING_ADMIN_REMOVE[c.from_user.id] = True
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings:cancel_admin_remove")]
    ])
    try:
        await c.message.reply("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ username –≤–∏–¥–∞ @username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤", reply_markup=kb)
    except Exception:
        pass
    await c.answer()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@dp.message(Command("set_monitored_store"))
async def on_set_monitored_store(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–æ–≤: /set_monitored_store 1,2,3,4,5")
        return
    try:
        ids = {int(x.strip()) for x in parts[1].split(",") if x.strip().isdigit()}
        await set_monitored_message_ids("store", ids)
        await m.answer(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –ø–æ—Å—Ç—ã —Ä–æ–∑–Ω–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {sorted(ids)}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("set_monitored_opt"))
async def on_set_monitored_opt(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–æ–≤: /set_monitored_opt 1,2,3,4,5")
        return
    try:
        ids = {int(x.strip()) for x in parts[1].split(",") if x.strip().isdigit()}
        await set_monitored_message_ids("opt", ids)
        await m.answer(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –ø–æ—Å—Ç—ã –æ–ø—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {sorted(ids)}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("add_monitored_store"))
async def on_add_monitored_store(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /add_monitored_store 28,29")
        return
    try:
        inc = {int(x.strip()) for x in parts[1].split(",") if x.strip().isdigit()}
        cur = await get_monitored_message_ids("store")
        updated = set(cur) | set(inc)
        await set_monitored_message_ids("store", updated)
        await m.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã: {sorted(inc)}\n–¢–µ–∫—É—â–∏–µ: {sorted(updated)}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("remove_monitored_store"))
async def on_remove_monitored_store(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /remove_monitored_store 28,29")
        return
    try:
        dec = {int(x.strip()) for x in parts[1].split(",") if x.strip().isdigit()}
        cur = await get_monitored_message_ids("store")
        updated = set(cur) - set(dec)
        await set_monitored_message_ids("store", updated)
        await m.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã: {sorted(dec)}\n–¢–µ–∫—É—â–∏–µ: {sorted(updated)}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("add_monitored_opt"))
async def on_add_monitored_opt(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /add_monitored_opt 28,29")
        return
    try:
        inc = {int(x.strip()) for x in parts[1].split(",") if x.strip().isdigit()}
        cur = await get_monitored_message_ids("opt")
        updated = set(cur) | set(inc)
        await set_monitored_message_ids("opt", updated)
        await m.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã: {sorted(inc)}\n–¢–µ–∫—É—â–∏–µ: {sorted(updated)}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("remove_monitored_opt"))
async def on_remove_monitored_opt(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /remove_monitored_opt 28,29")
        return
    try:
        dec = {int(x.strip()) for x in parts[1].split(",") if x.strip().isdigit()}
        cur = await get_monitored_message_ids("opt")
        updated = set(cur) - set(dec)
        await set_monitored_message_ids("opt", updated)
        await m.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã: {sorted(dec)}\n–¢–µ–∫—É—â–∏–µ: {sorted(updated)}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("set_master_store"))
async def on_set_master_store(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ ID: /set_master_store 123")
        return
    try:
        master_id = int(parts[1].strip())
        await set_master_message_id("store", master_id)
        await m.answer(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–∑–Ω–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {master_id}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("set_master_opt"))
async def on_set_master_opt(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ ID: /set_master_opt 123")
        return
    try:
        master_id = int(parts[1].strip())
        await set_master_message_id("opt", master_id)
        await m.answer(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {master_id}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("set_contacts"))
async def on_set_contacts(m: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    new_contacts = (m.text or "").replace("/set_contacts", "").strip()
    if not new_contacts:
        await m.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        return
    
    try:
        await set_setting("contacts", new_contacts, "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "general")
        await m.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        log.error(f"Error setting contacts: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("set_template"))
async def on_set_template(m: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω"""
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (m.text or "").split(None, 2)
    if len(parts) < 3:
        await m.answer("–§–æ—Ä–º–∞—Ç: /set_template order_received <–Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω>")
        return
    
    template_name = parts[1]
    new_template = parts[2]
    
    try:
        await set_setting(f"tpl:wholesale:{template_name}", new_template, f"–®–∞–±–ª–æ–Ω {template_name}", "templates")
        await m.answer(f"‚úÖ –®–∞–±–ª–æ–Ω {template_name} –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        log.error(f"Error setting template: {e}")
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
@dp.message(Command("add_admin"))
async def on_add_admin(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /add_admin @username")
        return
    try:
        username = parts[1].strip()
        success, message = await add_admin_by_username(
            username=username,
            full_name=None,
            added_by=m.from_user.id
        )
        await m.answer(f"‚úÖ {message}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("remove_admin"))
async def on_remove_admin(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (m.text or "").split(None, 1)
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /remove_admin @username")
        return
    try:
        username = parts[1].strip()
        success, message = await remove_admin_by_username(username)
        await m.answer(f"‚úÖ {message}")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("list_admins"))
async def on_list_admins(m: Message):
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    try:
        admins = await get_all_admins()
        if not admins:
            await m.answer("üë• –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"
        for admin in admins:
            username = f"@{admin.username}" if admin.username else "–ë–µ–∑ username"
            full_name = admin.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            text += f"‚Ä¢ {full_name} ({username})\n"
            text += f"  ID: <code>{admin.user_id}</code>\n"
            text += f"  –î–æ–±–∞–≤–ª–µ–Ω: {admin.added_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await m.answer(text, parse_mode="HTML")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("test_button_length"))
async def on_test_button_length(m: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –¥–ª–∏–Ω—ã –∫–Ω–æ–ø–æ–∫"""
    if not m.from_user or not await _is_manager(m.from_user.id, m.from_user.username, 'wholesale'):
        await m.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    mobile_limit = get_adaptive_button_length(m.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω–æ–π
    test_buttons = []
    
    # –ö–æ—Ä–æ—Ç–∫–∞—è –∫–Ω–æ–ø–∫–∞
    test_buttons.append(("üì± –ö–æ—Ä–æ—Ç–∫–∞—è –∫–Ω–æ–ø–∫–∞ ¬∑ 1 000 ‚ÇΩ", "test:short"))
    
    # –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞
    test_buttons.append(("üíª –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬∑ 5 000 ‚ÇΩ", "test:medium"))
    
    # –î–ª–∏–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–µ–∑–∞—Ç—å—Å—è)
    long_text = "üñ•Ô∏è –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ ¬∑ 10 000 ‚ÇΩ"
    if len(long_text) > mobile_limit:
        cut = mobile_limit - 3
        while cut > 10 and long_text[cut-1] != ' ':
            cut -= 1
        long_text = long_text[:cut].rstrip() + "..."
    test_buttons.append((long_text, "test:long"))
    
    kb = adaptive_kb(test_buttons, max_per_row=1, max_row_chars=50)
    
    text = (
        f"üß™ <b>–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –¥–ª–∏–Ω—ã –∫–Ω–æ–ø–æ–∫</b>\n\n"
        f"üìè <b>–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç:</b> {mobile_limit} —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã:"
    )
    
    await m.answer(text, parse_mode="HTML", reply_markup=kb)


# =============================================================================
# –ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–ö–ê–ó–ê –í –ß–ê–¢–ï –ú–ï–ù–ï–î–ñ–ï–†–û–í (‚úÖ/‚ùå + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–∏–∫–∞ + OCR)
# =============================================================================

def _manager_decision_kb(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'ord:approve:{order_id}'),
         InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',  callback_data=f'ord:reject:{order_id}')]
    ])

def _manager_photo_kb(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", callback_data=f"ord:skipphoto:{order_id}")]
    ])

async def _notify_managers_new_order(order, prod_name: str, price_each: int):
    total = price_each * order.quantity
    is_used_flag = False
    async with Session() as s:
        prod = (await s.execute(select(Product).where(Product.id == order.product_id))).scalar_one_or_none()
        if prod:
            is_used_flag = bool(prod.is_used)
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        ea = dict(prod.extra_attrs or {}) if prod else {}
        flag = (ea.get("flag") or "").strip()
    except Exception:
        flag = ""
    prod_label = f"{prod_name}{flag}{' (–ë/–£)' if is_used_flag else ''}"
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    template = await get_template("admin_order_notification")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    msg = render_template(template,
        order_id=order.id,
        user_id=order.user_id,
        username_info=(' @'+order.username) if order.username else '',
        product_name=prod_label,
        quantity=order.quantity,
        price_each=fmt_price(price_each),
        total_price=fmt_price(total)
    )
    sent_msg = None
    if MANAGER_GROUP_ID:
        try:
            sent_msg = await bot.send_message(MANAGER_GROUP_ID, msg, reply_markup=_manager_decision_kb(order.id), disable_notification=True)
        except Exception:
            sent_msg = None
    if not sent_msg:
        for mid in MANAGER_USER_IDS:
            try:
                sent_msg = await bot.send_message(mid, msg, reply_markup=_manager_decision_kb(order.id), disable_notification=True)
                if sent_msg:
                    break
            except Exception:
                continue
    if sent_msg:
        async with Session() as s:
            await s.execute(text("UPDATE orders SET decision_message_id=:mid WHERE id=:oid"), {"mid": sent_msg.message_id, "oid": order.id})
            await s.commit()

async def _is_manager(user_id: int, username: str = None, channel_type: str = 'wholesale') -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º (–ë–î –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        is_admin_in_db = await is_admin(user_id, username, channel_type)
        if is_admin_in_db:
            return True
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º .env (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if MANAGER_USER_IDS and user_id in MANAGER_USER_IDS:
            return True
        
        return False
    except Exception as e:
        log.error(f"Error checking manager status for user {user_id}: {e}")
        return False

async def _notify_buyer_decision(order_id: int, approved: bool, serial_text: str | None = None, photo_file_id: str | None = None):
    async with Session() as s:
        row = (await s.execute(text("""
            SELECT user_id, username, product_name, quantity, price_each, product_id
            FROM orders WHERE id=:oid
        """), {"oid": order_id})).first()
    if not row:
        log.error(f"Order {order_id} not found for buyer notification")
        return
    uid, uname, pname, qty, price_each, product_id = row
    total = int(price_each) * int(qty or 0)
    contacts = await get_contacts_text()

    tpl = await get_template("order_approved" if approved else "order_rejected")
    # –î–ª—è order_approved –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ –∞–¥—Ä–µ—Å–∞
    address = ""
    contacts_body = contacts
    if approved:
        addr, contacts_wo_addr = extract_address_and_contacts(contacts)
        address = addr
        contacts_body = contacts_wo_addr
    # –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∞—Ç—å —Ñ–ª–∞–≥
    flag = ""
    try:
        async with Session() as s:
            prod = (await s.execute(select(Product).where(Product.id == product_id))).scalar_one_or_none()
            if prod:
                ea = dict(prod.extra_attrs or {})
                flag = (ea.get("flag") or "").strip()
    except Exception:
        flag = ""

    msg = render_template(
        tpl,
        product_name=f"{pname}{flag}",
        quantity=qty,
        price_each=fmt_price(int(price_each)),
        total=fmt_price(total),
        user_id=uid,
        username=uname or "",
        contacts=contacts_body,
        address=address
    )
    
    log.info(f"Sending notification to user {uid} for order {order_id}, approved: {approved}")
    try:
        await bot.send_message(uid, msg, disable_notification=True)
        log.info(f"‚úÖ Notification sent to user {uid}")
    except Exception as e:
        log.error(f"‚ùå Failed to send notification to user {uid}: {e}")
    
    if approved and photo_file_id:
        try:
            await bot.send_photo(uid, photo=photo_file_id, caption="–§–æ—Ç–æ –∫–æ—Ä–æ–±–∫–∏ / —Å–µ—Ä–∏–π–Ω–∏–∫–∞", disable_notification=True)
            log.info(f"‚úÖ Photo sent to user {uid}")
        except Exception as e:
            log.error(f"‚ùå Failed to send photo to user {uid}: {e}")
        if serial_text:
            try:
                await bot.send_message(uid, f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{html.quote(serial_text.strip())}</code>", disable_notification=True)
                log.info(f"‚úÖ Serial number sent to user {uid}")
            except Exception as e:
                log.error(f"‚ùå Failed to send serial number to user {uid}: {e}")

@dp.callback_query(F.data.regexp(r"^ord:(approve|reject):(\d+)$"))
async def cb_order_moderate(call: CallbackQuery):
    action, oid_str = call.data.split(":")[1], call.data.split(":")[2]
    try:
        oid = int(oid_str)
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if not await _is_manager(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    async with Session() as s:
        row = (await s.execute(text("SELECT product_id, status FROM orders WHERE id=:oid"), {"oid": oid})).first()
        if not row:
            await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        product_id, status = row
        if status in ("approved", "rejected"):
            await call.answer(f"–£–∂–µ {status}", show_alert=True)
            return

        if action == "reject":
            await s.execute(text("UPDATE orders SET status='rejected', manager_id=:mid WHERE id=:oid"), {"mid": call.from_user.id, "oid": oid})
            await s.commit()
            try:
                await call.message.edit_reply_markup(reply_markup=None)
                await call.message.reply("‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω</b>\n\nüí¨ <i>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω –æ–± –æ—Ç–∫–∞–∑–µ.</i>\n\nüîÑ <i>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.</i>")
            except Exception:
                pass
            await _notify_buyer_decision(oid, approved=False)
            await call.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            return

        if action == "approve":
            await s.execute(text("UPDATE orders SET status='approved', manager_id=:mid WHERE id=:oid"), {"mid": call.from_user.id, "oid": oid})
            await s.commit()
            try:
                await call.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass
            # –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–æ—Å—å–±–∞ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ
            try:
                await call.message.reply(
                    "‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>\n\n"
                    "üì∏ <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –ü—Ä–∏—à–ª–∏—Ç–µ <b>—Ñ–æ—Ç–æ –∫–æ—Ä–æ–±–∫–∏/—Å–µ—Ä–∏–π–Ω–∏–∫–∞</b> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                    "üí° <i>–ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>",
                    reply_markup=_manager_photo_kb(oid),
                    parse_mode="HTML"
                )
            except Exception:
                pass
            await call.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            return

@dp.callback_query(F.data.regexp(r"^ord:skipphoto:(\d+)$"))
async def cb_skip_photo(call: CallbackQuery):
    if not await _is_manager(call.from_user.id, call.from_user.username):
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    try:
        parts = call.data.split(":")
        oid = int(parts[2])
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —Ñ–æ—Ç–æ
    async with Session() as s:
        row = (await s.execute(text("SELECT photo_file_id FROM orders WHERE id=:oid"), {"oid": oid})).first()
        if row and row[0]:
            await call.answer("–§–æ—Ç–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", show_alert=True)
            return
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É "–§–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
        await call.message.reply("üì≠ <b>–§–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–∏–∫–∞ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ —Ç—Ä–µ–±—É–µ–º–æ–µ</b>\n\n‚úÖ <i>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Ñ–æ—Ç–æ.</i>")
    except Exception as e:
        log.error(f"Error updating keyboard: {e}")
        try:
            await call.message.reply("üì≠ <b>–§–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–∏–∫–∞ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ —Ç—Ä–µ–±—É–µ–º–æ–µ</b>\n\n‚úÖ <i>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ —Ñ–æ—Ç–æ.</i>")
        except Exception as e2:
            log.error(f"Error sending reply: {e2}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    try:
        await _notify_buyer_decision(oid, approved=True, serial_text=None, photo_file_id=None)
        await call.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")
    except Exception as e:
        log.error(f"Error notifying buyer: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è")

# --- OCR –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
ENABLE_OCR = (os.getenv("ENABLE_OCR", "false").lower() == "true")
TESSERACT_CMD = os.getenv("TESSERACT_CMD")

try:
    if ENABLE_OCR and not TESSERACT_CMD:
        import shutil
        TESSERACT_CMD = shutil.which("tesseract") or ""

    if ENABLE_OCR and TESSERACT_CMD:
        try:
            import pytesseract  # type: ignore
            pytesseract.pytesseract.tesseract_cmd = TESSERACT_CMD
            OCR_READY = True
        except Exception:
            OCR_READY = False
    else:
        OCR_READY = False
except Exception:
    OCR_READY = False

def _extract_serial_text(img_path: str) -> str | None:
    if not OCR_READY:
        return None
    try:
        import pytesseract  # type: ignore
        raw = (pytesseract.image_to_string(img_path, lang="eng") or "").strip()
        if not raw:
            return None
        m = re.findall(r"[A-Z0-9\-]{8,}", raw.replace(" ", "").upper())
        if m:
            return m[0]
        return raw.splitlines()[0] if raw else None
    except Exception:
        return None

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ —Å–µ—Ä–∏–π–Ω–∏–∫–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
@dp.message(
    F.chat.id == MANAGER_GROUP_ID,
    F.reply_to_message.func(lambda m: m and m.from_user and m.from_user.is_bot),
    F.content_type.in_({ContentType.PHOTO})
)
async def manager_send_serial_photo(m: Message):
    ref = m.reply_to_message
    if not ref:
        return
    m2 = re.search(r"#?–∑–∞–∫–∞–∑[^\d]*(\d+)", (ref.text or ref.caption or ""), re.I)
    oid_hint = int(m2.group(1)) if m2 else None

    async with Session() as s:
        if oid_hint:
            row = (await s.execute(text("SELECT id FROM orders WHERE id=:oid"), {"oid": oid_hint})).first()
        else:
            row = (await s.execute(text("""
                SELECT id FROM orders
                WHERE photo_file_id IS NULL
                ORDER BY id DESC LIMIT 1
            """))).first()

    if not row:
        await m.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –∑–∞–∫–∞–∑–æ–º. –î–æ–±–∞–≤—å—Ç–µ –≤ –ø–æ–¥–ø–∏—Å—å #–∑–∞–∫–∞–∑<id> (–Ω–∞–ø—Ä–∏–º–µ—Ä, #–∑–∞–∫–∞–∑123).")
        return

    oid = int(row[0])
    file_id = m.photo[-1].file_id if m.photo else None
    serial_text = None

    if OCR_READY and file_id:
        try:
            f = await bot.get_file(file_id)
            path = f"tmp_serial_{oid}.jpg"
            await bot.download_file(f.file_path, destination=path)
            serial_text = _extract_serial_text(path)
            try:
                os.remove(path)
            except Exception:
                pass
        except Exception:
            serial_text = None

    async with Session() as s:
        await s.execute(text("UPDATE orders SET photo_file_id=:fid, serial_text=:st WHERE id=:oid"),
                        {"fid": file_id, "st": serial_text, "oid": oid})
        await s.commit()

    msg = "üì∏ <b>–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∑–∞–∫–∞–∑—É!</b>"
    if serial_text:
        msg += f"\n\nüîç <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <code>{html.quote(serial_text)}</code>"
    else:
        msg += f"\n\nüí° <i>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</i>"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await m.reply(msg)
    
    await _notify_buyer_decision(oid, approved=True, serial_text=serial_text, photo_file_id=file_id)

# –ó–∞–≥–ª—É—à–∫–∞ –∫–æ–ª–±—ç–∫–∞ "noop" (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç)
@dp.callback_query(F.data == "noop")
async def cb_noop(c: CallbackQuery):
    await c.answer()

# -----------------------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# -----------------------------------------------------------------------------
# –®–∏—Ä–æ–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ)
@dp.message(F.text, F.chat.type.in_({"private"}))
async def on_possible_settings_text(m: Message):
    uid = m.from_user.id if m.from_user else 0
    
    # –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ü–µ–ª–µ–≤—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if (m.text or "").startswith("/"):
        return
    
    # –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    button_texts = [
        BTN_CATALOG, BTN_CONTACTS, BTN_CART, BTN_RESCAN, BTN_DIAG, BTN_SETTINGS,
        BTN_RESCAN_ADMIN, BTN_DIAG_ADMIN, BTN_SETTINGS_ADMIN,
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    ]
    if m.text in button_texts:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–ë–î –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞)
    is_admin_user = False
    try:
        is_admin_user = await is_admin(uid, m.from_user.username if m.from_user else None)
    except Exception:
        pass
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º .env (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if not is_admin_user and MANAGER_USER_IDS and uid in MANAGER_USER_IDS:
        is_admin_user = True
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–¥–º–∏–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not is_admin_user:
        return
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not (uid in PENDING_CONTACTS_EDIT or uid in PENDING_TEMPLATE_EDIT or 
            uid in PENDING_ADMIN_ADD or uid in PENDING_ADMIN_REMOVE or 
            uid in PENDING_CATEGORY_EDIT):
        return
    
    if is_admin_user:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if uid in PENDING_CONTACTS_EDIT:
            PENDING_CONTACTS_EDIT.pop(uid, None)
            await set_setting("contacts", m.text)
            await m.answer("‚úÖ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\nüí° <i>–ù–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞.</i>", parse_mode="HTML")
            return
        if uid in PENDING_TEMPLATE_EDIT:
            name = PENDING_TEMPLATE_EDIT.pop(uid)
            await set_setting(f"tpl:wholesale:{name}", m.text)
            await m.answer(f"‚úÖ <b>–®–∞–±–ª–æ–Ω <code>{name}</code> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\nüí° <i>–ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.</i>", parse_mode="HTML")
            return
        if uid in PENDING_ADMIN_ADD:
            PENDING_ADMIN_ADD.pop(uid, None)
            username = (m.text or '').strip()
            try:
                ok, msg = await add_admin_by_username(username=username, full_name=None, added_by=uid)
                await m.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg)
            except Exception as e:
                await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
            return
        if uid in PENDING_ADMIN_REMOVE:
            PENDING_ADMIN_REMOVE.pop(uid, None)
            username = (m.text or '').strip()
            try:
                ok, msg = await remove_admin_by_username(username=username)
                await m.answer(("‚úÖ " if ok else "‚ö†Ô∏è ") + msg)
            except Exception as e:
                await m.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return
        if uid in PENDING_CATEGORY_EDIT:
            edit_data = PENDING_CATEGORY_EDIT.pop(uid, None)
            if edit_data:
                new_category = (m.text or '').strip()
                try:
                    async with Session() as s:
                        await s.execute(text(
                            """
                            UPDATE monitored_posts
                            SET category = :cat
                            WHERE channel_id = :cid AND message_id = :mid
                            """
                        ), {"cat": new_category, "cid": edit_data["channel_id"], "mid": edit_data["message_id"]})
                        await s.commit()
                    
                    channel_name = "–û–ø—Ç–æ–≤—ã–π" if edit_data["channel_type"] == "opt" else "–†–æ–∑–Ω–∏—á–Ω—ã–π"
                    await m.answer(
                        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—Ç–∞ {edit_data['message_id']} –≤ {channel_name} –∫–∞–Ω–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_category}\n\n"
                        f"üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ /fix_categories –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
                    )
                except Exception as e:
                    await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return

    # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    try:
        cats = await fetch_categories()
        if cats:
            max_row_chars = 34 if any(len(t) > 16 for t, _ in cats) else 40
            kb = adaptive_kb(cats, max_per_row=2, max_row_chars=max_row_chars)
            await m.answer("üõçÔ∏è <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb, parse_mode="HTML")
        else:
            await m.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        log.error(f"Error showing catalog: {e}")
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data == "settings:cancel_contacts")
async def cancel_contacts_edit(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    PENDING_CONTACTS_EDIT.pop(c.from_user.id, None)
    await c.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await c.answer()

@dp.callback_query(F.data == "settings:cancel_template")
async def cancel_template_edit(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id, c.from_user.username, 'wholesale'):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    PENDING_TEMPLATE_EDIT.pop(c.from_user.id, None)
    await c.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await c.answer()

@dp.callback_query(F.data == "settings:cancel_admin_add")
async def cancel_admin_add(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    PENDING_ADMIN_ADD.pop(c.from_user.id, None)
    await c.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await c.answer()

@dp.callback_query(F.data == "settings:cancel_admin_remove")
async def cancel_admin_remove(c: CallbackQuery):
    if not c.from_user or not await _is_manager(c.from_user.id):
        await c.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    PENDING_ADMIN_REMOVE.pop(c.from_user.id, None)
    await c.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await c.answer()

async def main_menu_kb(user_id: Optional[int], chat_type: str = "private") -> ReplyKeyboardMarkup:
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    cart_text = BTN_CART
    if user_id:
        try:
            cart_count = await cart_count_db(user_id)
            if cart_count > 0:
                cart_text = f"{BTN_CART} ({cart_count})"
        except Exception:
            pass  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    
    rows = [  # type: list[list[KeyboardButton]]
        [KeyboardButton(text=BTN_CATALOG)],
        [KeyboardButton(text=BTN_CONTACTS), KeyboardButton(text=cart_text)],
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ (–ë–î –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞, .env –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    is_manager = False
    if user_id and chat_type == "private":
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
        try:
            is_manager = await is_admin(user_id, channel_type='wholesale')
        except Exception as e:
            log.error(f"Error checking admin status: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º .env (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if not is_manager and MANAGER_USER_IDS and user_id in MANAGER_USER_IDS:
            is_manager = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if is_manager:
        rows.append([KeyboardButton(text=BTN_RESCAN_ADMIN), KeyboardButton(text=BTN_DIAG_ADMIN)])
        rows.append([KeyboardButton(text=BTN_SETTINGS_ADMIN)])
    
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    log.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        me = await bot.get_me()
        log.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(
            bot,
            allowed_updates=["message", "callback_query", "channel_post", "edited_channel_post", "my_chat_member"]
        )
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
