# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app_store.privacy.consent_manager import ConsentManager, CONSENT_TEXTS


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–≥–ª–∞—Å–∏—è
consent_router = Router()


class ConsentStates(StatesGroup):
    waiting_for_revoke_reason = State()


def get_consent_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_agree"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="consent_decline")
        ],
        [
            InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url="https://your-domain.com/privacy"),
            InlineKeyboardButton(text="üìã –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î", url="https://your-domain.com/consent")
        ]
    ])


def get_marketing_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="marketing_agree"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="marketing_decline")
        ]
    ])


def get_revoke_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîí –û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="consent_revoke"),
            InlineKeyboardButton(text="üìß –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="marketing_unsubscribe")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])


@consent_router.message(Command("start"))
async def cmd_start_with_consent(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≥–ª–∞—Å–∏—è"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ
    has_consent = await ConsentManager.check_user_consent(user_id)
    
    if not has_consent:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î
        await message.answer(
            CONSENT_TEXTS["welcome"],
            reply_markup=get_consent_keyboard(),
            parse_mode="HTML"
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (—ç—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
        await message.answer(
            "‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "–í—ã —É–∂–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            parse_mode="HTML"
        )


@consent_router.callback_query(F.data == "consent_agree")
async def handle_consent_agree(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î"""
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    await ConsentManager.save_user_consent(
        user_id=user_id,
        username=username,
        ip_address=str(callback.message.chat.id),  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å IP
        user_agent="Telegram Bot"
    )
    
    await callback.message.edit_text(
        "‚úÖ <b>–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º.\n\n"
        "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö?",
        reply_markup=get_marketing_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@consent_router.callback_query(F.data == "consent_decline")
async def handle_consent_decline(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è"""
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
        "–º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —É—Å–ª—É–≥–∏.\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="HTML"
    )
    await callback.answer()


@consent_router.callback_query(F.data == "marketing_agree")
async def handle_marketing_agree(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback.from_user.id
    
    await ConsentManager.set_marketing_consent(user_id, True)
    
    await callback.message.edit_text(
        "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üõç",
        parse_mode="HTML"
    )
    await callback.answer()


@consent_router.callback_query(F.data == "marketing_decline")
async def handle_marketing_decline(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user_id = callback.from_user.id
    
    await ConsentManager.set_marketing_consent(user_id, False)
    
    await callback.message.edit_text(
        "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üõç",
        parse_mode="HTML"
    )
    await callback.answer()


@consent_router.callback_query(F.data == "consent_revoke")
async def handle_consent_revoke(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è"""
    user_id = callback.from_user.id
    
    # –û—Ç–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    await ConsentManager.revoke_user_consent(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–∑–≤–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ")
    
    await callback.message.edit_text(
        CONSENT_TEXTS["revoked"],
        parse_mode="HTML"
    )
    await callback.answer()


@consent_router.callback_query(F.data == "marketing_unsubscribe")
async def handle_marketing_unsubscribe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user_id = callback.from_user.id
    
    await ConsentManager.set_marketing_consent(user_id, False)
    
    await callback.message.edit_text(
        "‚úÖ <b>–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        parse_mode="HTML"
    )
    await callback.answer()


@consent_router.message(Command("privacy"))
async def cmd_privacy(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    await message.answer(
        "üîí <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
        "üìÑ [–ü–æ–ª–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://your-domain.com/privacy)\n"
        "üìã [–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î](https://your-domain.com/consent)\n\n"
        "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /consent",
        parse_mode="HTML"
    )


@consent_router.message(Command("consent"))
async def cmd_consent_management(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–µ–º"""
    user_id = message.from_user.id
    status = await ConsentManager.get_consent_status(user_id)
    
    if not status["has_consent"]:
        await message.answer(
            "‚ùå <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ</b>\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            parse_mode="HTML"
        )
    else:
        consent_date = status['consent_date'].strftime('%d.%m.%Y %H:%M') if status['consent_date'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        await message.answer(
            "üîí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏–µ–º</b>\n\n"
            f"‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {consent_date}\n"
            f"üìß –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if status['marketing_consent'] else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
            f"‚ùå –°—Ç–∞—Ç—É—Å: {'–û—Ç–æ–∑–≤–∞–Ω–æ' if status['is_revoked'] else '–ê–∫—Ç–∏–≤–Ω–æ'}",
            reply_markup=get_revoke_keyboard(),
            parse_mode="HTML"
        )


@consent_router.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: Message):
    """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user_id = message.from_user.id
    await ConsentManager.set_marketing_consent(user_id, False)
    
    await message.answer(
        "‚úÖ <b>–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        parse_mode="HTML"
    )


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
class ConsentMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î"""
    
    async def __call__(self, handler, event, data):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏–µ–º
        if hasattr(event, 'text') and event.text:
            if event.text.startswith('/privacy') or event.text.startswith('/consent') or event.text.startswith('/unsubscribe') or event.text.startswith('/start'):
                return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback'–∏ —Å–æ–≥–ª–∞—Å–∏—è
        if hasattr(event, 'data') and event.data:
            if event.data.startswith('consent_') or event.data.startswith('marketing_'):
                return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id
            has_consent = await ConsentManager.check_user_consent(user_id)
            
            if not has_consent:
                if hasattr(event, 'answer'):
                    await event.answer(
                        CONSENT_TEXTS["consent_required"],
                        parse_mode="HTML"
                    )
                return
        
        return await handler(event, data)
